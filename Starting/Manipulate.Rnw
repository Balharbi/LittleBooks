<<echo=FALSE,include=FALSE>>=
source('../include/setup.R')
inRStudio <- FALSE    # only try manipulate things if in RStudio
opts_chunk$set( fig.path="figures/Manipulate-" ) 
if (!exists("..makingMaster..")) {
	set_parent('Master-Starting.Rnw')
}
set.seed(123)
@


\chapter{Getting Interactive with \texttt{manipulate} and \texttt{shiny}}

One very attractive feature of \RStudio\ is the \function{manipulate()} function (in the 
\pkg{manipulate} package, which is only available within \RStudio).  This function
makes it easy to create a set of controls (such as sliders, checkboxes, drop down selections, etc.)
that can be used to dynamically change values within an expression.  
When a value is changed using these controls, the expression is automatically
re-executed and any plots created as a result are redrawn.  
This can be used to quickly prototype a number of activities and
demos as part of a statistics lecture.

\pkg{shiny} is a new web development system for \R\ being designed by the \RStudio\ team.
\pkg{shiny} uses a reactive programming model to make it relatively easy for an \R\ programmer
to create highly interactive, well designed web applications using \R\ without needing to know
much about web programming.  Programming in \pkg{shiny} is more involved than using
\pkg{manipulate}, but it offers the designer more flexibility.  One of the goals in creating
\pkg{shiny} was to support corporate environments, where a small number of statisticians and 
programmers can create web applications that can be used by others within the company without 
requiring them to know any \R.  This same framework offers many possibilities for educational
purposes as well.  Some have even suggested implementing fairly extensive GUI interfaces to 
commonly used \R\ functionality using \pkg{shiny}.  

\section{Getting Started with \texttt{manipulate}}

The \function{manipulate()} function and the various control functions that are used with it
are only available after loading the \pkg{manipulate} package, which is only available in 
\RStudio.

<<eval=inRStudio>>=
require(manipulate)
@


\subsection{Sliders}

<<manipulate-histogram1, echo=TRUE, tidy=FALSE, eval=inRStudio>>=
manipulate(
  histogram( ~ eruptions, data=faithful, n=N),
  N = slider(5,40)
)
@
\marginnote{We find it useful to capitalize the inputs to the manipulated expression
that are hooked up to \pkg{manipulate} controls.  This helps avoid naming collisions 
and signals how the main manipulated expression is being used.}
This generates a plot along with a slider ranging from 5 bins to 40.

\begin{center}
\includegraphics[width=3.8in]{images/manip-hist1.png}
\end{center}

When the slider is changed, we see a clearer view of the eruptions of Old Faithful.

\centerline{\includegraphics[width=3.8in]{images/manip-hist2.png}}



\subsection{Check Boxes}

<<manipulate-histogram2, tidy=FALSE, eval=inRStudio>>=
manipulate(
  histogram( ~ age, data=HELPrct, n=N, density=DENSITY),
  N = slider(5,40),
  DENSITY = checkbox()
)
@

\centerline{\includegraphics[width=3.8in]{images/manipulate-checkbox}}

\subsection{Drop-down Menus}

Drop-down menus can be added using the \function{picker()} function.

<<manipulate-histogram3, eval=inRStudio, tidy=FALSE>>=
manipulate(
    histogram( ~ age, data=HELPrct, n=N, 
                       fit=DISTRIBUTION, dlwd=4),
    N = slider(5,40),
    DISTRIBUTION = 
        picker('normal', 'gamma', 'exponential', 'lognormal',
               label="distribution")
)
@

\centerline{\includegraphics[width=3.8in]{images/manipulate-picker}}

\subsection{Visualizing Normal Distributions}
\label{sec:vis-normal-dist}
In this section we will gradually build up a small \pkg{manipulate} example
that shows the added flexibility that comes from writing a function that 
returns a \pkg{manipulate} object.  Such functions can be distributed to students
to allow them to explore interactively in a more flexible way.

We begin by creating an illustration of tail probabilities in a normal distribution.
<<manipulate-xpnorm, tidy=FALSE, eval=inRStudio>>=
manipulate( 
    xpnorm( X, 500, 100, verbose=FALSE, invisible=TRUE ), 
    X = slider(200,800) )
@
\centerline{\includegraphics[width=3.8in]{images/manipulate-xpnorm}}
%
The version below can be used to investigate central probabilities and tail probabilities.
<<manipulate-xpnorm2, eval=inRStudio, tidy=FALSE>>=
manipulate( 
    xpnorm( c(-X,X), 500, 100, verbose=FALSE, invisible=TRUE ), 
    X = slider(200,800) )
@

These examples work with a fixed distribution.  Here is a fancier version in which 
a function returns a manipulate object.  This allows us to easily create illustrations
like the ones above for any normal distribution.
<<eval=inRStudio, tidy=FALSE>>=
mNorm <- function( mean=0, sd=1 ) {
  lo <- mean - 5*sd 
  hi <- mean + 5*sd
  manipulate( 
    xpnorm( c(A,B), mean, sd, verbose=FALSE, invisible=TRUE ), 
    A = slider(lo, hi, initial=mean-sd), 
    B = slider(lo, hi, initial=mean+sd)
  )
}
mNorm( mean=100, sd=10 )
@

\section{\texttt{mPlot()}}

The \pkg{mosaic} package provides the \function{mPlot()} function 
which allows users to create a wide variety of 
plots using either \pkg{lattice} or \pkg{ggplot2}.  Furthermore, the 
code used to generate these plots can be displayed upon request.  This facilitates
learning these commands, allows users to make further modifications that are not
possible in the manipulate interface, and provides an easy copy-and-paste mechanism 
for dropping these plots into other documents.

The available plots come in two clusters, depending on whether the underlying plot
is essentially two-variable or one-variable.  Additional variables can be represented
using color, size, and sub-plots (facets).

<<eval=FALSE>>=
# These are essentially 2-variable plots
mPlot( HELPrct, "scatter" )            # start with a scatter plot
mPlot( HELPrct, "boxplot" )            # start with boxplots
mPlot( HELPrct, "violin" )             # start with violin plots
# These are essentially 1-variables plots
mPlot( HELPrct, "histogram" )          # start with a histogram 
mPlot( HELPrct, "density" )            # start with a density plot
mPlot( HELPrct, "frequency polygon" )  # start with a frequency polygon
@


\begin{center}
	\includegraphics[width=3.8in]{images/mPlot}
\end{center}


\section{Shiny}

\pkg{shiny} is a package created by the \RStudio\ team to, in their words,
\begin{quotation}
	[make] it incredibly easy to build interactive web
        applications with R. Automatic ``reactive" binding between
        inputs and outputs and extensive pre-built widgets make it
        possible to build beautiful, responsive, and powerful
        applications with minimal effort.
\end{quotation}
These web applications can, of course, run \R\ code to do computations and produce
graphics that appear in the web page.

The level of coding skill required to create this is beyond the scope of this book, but those
with a little more programming background can easily learn the necessary toolkit to make beautiful
interactive web pages.  
More information about \pkg{shiny} and some example applications are available at 
\url{http://www.rstudio.com/shiny/}.

\begin{problem}
The following code makes a scatterplot with separate symbols for each sex.
<<eval=FALSE>>=
xyplot(cesd ~ age, data=HELPrct, groups=sex)
@
Build a \pkg{manipulate} example that allows you to turn the grouping on and off with a 
checkbox.
\end{problem}

\begin{problem}
Build a \pkg{manipulate} example that uses a picker to select from a number of 
variables to make a plot for.  Here's an example with a histogram:

\medskip
\centerline{\includegraphics[width=3.8in]{images/manipulate-multihist}}
\end{problem}

\begin{problem}
Design your own  interactive demonstration idea and implement it using 
\RStudio\ \pkg{manipulate} tools.
\end{problem}

\section*{Exercises}
\shipoutProblems

