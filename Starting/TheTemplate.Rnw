<<echo=FALSE,include=FALSE>>=
opts_chunk$set( fig.path="figures/RForStudents-" ) 
set_parent('Master-Starting.Rnw')
require(mosaic)
require(mosaicData)
set.seed(123)
@

\def\phbox#1{\fbox{\phantom{g#1l}}}
\def\ffbox#1{\fbox{\phantom{g}#1\phantom{b}}}


\chapter{Less Volume, More Creativity} 

\label{chap:TheTemplate}
\label{chap:Template}



\begin{quote}
A lot of times you end up putting in a lot more volume, because you are
teaching fundamentals  and you are teaching concepts that you need to put in,
but you may not necessarily use because they are building blocks for other
concepts and variations that will come off of that ... In the offseason you
have a chance to take a step back and tailor it more specifically towards your
team and towards your players. 

\hfill -- Mike McCarthy, Head Coach, Green Bay Packers 
\end{quote}

                                          

\begin{quote}
Perfection is achieved, not when there is nothing more to add, but when there
is nothing left to take away. 

\hfill -- Antoine de Saint-Exupery,  writer, poet, aviator
\end{quote}


\medskip

\noindent
One key to successfully introducing \R\ is finding a set of commands that is
\begin{itemize}
	\item {small}, % fewer is better
    \item {coherent}, and  % commands should be as similar as possible
	\item {powerful}. % can do what needs doing 
\end{itemize}

This chapter provides an extensive example of this ``Less Volume, More Creativity" 
approach.  
The \pkg{mosaic} package (combined with the \pkg{lattice} package and other 
core \R\ functionality)
provides a simple yet powerful framework that equips students to produce all of the
		\begin{itemize}
			\item
				numerical summaries, 
			\item
				graphical summaries, and 
			\item
				linear models
		\end{itemize}
needed in an introductory course.  By presenting this as one master template with variations,
we emphasize the similarity among these commands and reduce the cognitive load for students.
In our experience, this has made \R\ much more approachable and enjoyable for students
and their instructors.


\section{The \texttt{mosaic} package and the formula template}

Much of the early work on the \pkg{mosaic} package centered on producing a minimal
set of \R\ commands that could provide students with everything need for introductory 
statistics without overwhelming students with too many commands.  One of the \pkg{mosaic}
package vignettes includes a document describing just such a set of commands.

Much of this is built off the following template that is used repeatedly

\begin{center}
	\Large
	\sf
	\phbox{goal} $\Big($
	\phbox{y} $\sim$  \phbox{x} , data = \phbox{mydata} $\Big)$
\end{center}
The template is used by filling in the boxes.  It helps to give each box a name:
\begin{center}
	\Large
	\sf
	\ffbox{goal} $\Big($ 
	\ffbox{y} $\sim$  \ffbox{x} , data = \ffbox{mydata} $\Big)$
\end{center}
\TeachingTip{After introducing this template, you might
quiz students to make sure they have learned it.  This
will also emphasize its importance.}

The template has a bit more flexibility than we have indicated.
Sometimes the \code{y} is not needed:
<<eval=FALSE>>=
goal ( ~ x, data=mydata )
@
The formula may also include a third part
<<eval=FALSE>>=
goal ( y ~ x | z , data=mydata )
@
We can unify all of these into one form:
<<eval=FALSE>>=
goal ( formula , data=mydata )
@

The template can be applied to create numerical summaries, graphical summaries, or model fits
by answering two questions and using the answers to fill in the slots of the template:

\myindex{two questions|see{questions!two}}
\myindex{questions!two}

\begin{enumerate}
	\item What do you want \R\ to do?  

This is the goal.

	\item What must \R\ know to do that?  

		These are the inputs to the function.  For numerical summaries, graphical summaries,
		and model fits, we typically need to specify the variables involved and the data
		frame in which they are stored.
\end{enumerate}

\section{Graphical summaries of data}

\TeachingTip{We recommend showing some plots on the first day and having students
generate their own graphs before the end of the first week.}%

Graphical summaries are an important and eye-catching way to demonstrate the 
power and flexibility of our template.
\Pointer{We are often asked about the other graphics systems, especially 
\pkg{ggplot2} graphics.  In our experience, \pkg{lattice} makes it easier for
beginners to create a wide variety of more or less ``standard'' plots -- including
the ability to represent multiple variables at once.  \pkg{ggplot2}, on the 
other hand, makes it easier to generate custom plots or to combine plot components.
Each has their place, and we use both systems.  But for beginners, we typically
emphasize \pkg{lattice}.

Coming soon is a new player in the visualization arena: \pkg{ggvis}.  This package,
by the same author as \pkg{ggplot2} is already available in a developmental version
and promises to add interactivity and speed to the strengths of \pkg{ggplot2}.
}%
We like to introduce students to graphical summaries early in the course.
This gives the students access to functionality where \R\
really shines (and is certainly much better than a hand-held calculator). It also 
begins to develop their ability to interpret graphical representations of
data, to think about distributions, and to pose statistical questions.


\Rindex{gplot2}
\Rindex{lattice}
\Rindex{ggvis}

%
There are several ways to make graphs in \R.  One approach is a system called
\pkg{lattice} graphics.   Whenever the \pkg{mosaic} package is loaded, the \pkg{lattice}
package is also loaded.  One of the attractive aspects of 
\pkg{lattice} plots is that they make use of the same template we will use for 
numerical summaries and linear models.



\subsection{Graphical summaries of two variables}



\subsubsection{A first example: Making a scatter plot}

As an example, let's create the following plot, which shows the 
number of births in the United States for each day in 1978.
}
\myindex{scatter plot|see{\texttt{xyplot()}}}
\Rindex{xyplot()}

<<scatter-births, echo=FALSE>>=
xyplot( births ~ date, data=Births78) 
@

\TeachingTip{This plot can make an effective discussion starter
early in a course.  Ask students to conjecture explanations for
the patterns they observe in the plots.  Their answers will reveal
whether they are interpreting the plot correctly.}

\begin{enumerate}
	\item What is the goal?

		We want a scatter plot.  The function that creates scatter plots is called
		\function{xyplot()}, so this will go into the goal slot of our template.

	\item
		What does \R\ need to know?

		\R\ needs to know which variable goes where and where to find the variables.
		In this case, the data are stored in the \dataframe{Births78} data frame:
\Rindex{Births78}
<<>>=
head(Births78)
@
		We want to put 
		the number of births (\variable{births}) along the $y$-axis and 
		the day of the year (\variable{date}) along the $x$-axis.

\end{enumerate}
Putting this all together, we get the following command
<<eval=FALSE>>=
<<scatter-births>>
@



\subsubsection{Another Example: Boxplots}

\myindex{boxplot|see{\texttt{bwplot()}}}
\Rindex{bwplot()}
Now let's create this plot, which shows boxplots
of age for each of three substances abused by participants in the 
\emph{Health Evaluation and Linkage to Primary Care} randomized
clinical trial.
\Pointer{You can find out more about the
\dataframe{HELPrct} data set using the command
<<eval=FALSE, tidy=FALSE>>=
?HELPrct
@
}

\Rindex{HELPrct}
<<bwplot-example1, echo=FALSE>>=
bwplot( age ~ substance, data=HELPrct)
@

The data we need are in the \dataframe{HELPrct} data frame, from which 
we want to display variables \variable{age} and \variable{substance} on the 
$y$- and $x$-axes.  According to our template, the command to create this plot has 
the form

<<eval=FALSE>>=
goal(age ~ substance, data=HELPrct)
@
The only additional information we need is the name of the function that creates
boxplots.  That function is \function{bwplot()}.
\Pointer{You may be wondering about plots for two categorical variables.
A commonly used plot for this is a segmented bar graph.  We will treat this
as a augmented version of a simple bar graph, which is a graphical summary
of one categorical variable.

Another plot that can be used to display two (or more) categorical variables is a 
mosaic plot.  The \pkg{lattice} package does not include mosaic plots, but the
\pkg{vcd} package provides a \function{mosaic()} function that creates mosaic plots.}\Rindex{vcd}%
So we can create the plot with
<<eval=FALSE>>=
<<bwplot-example1>>
@

If we want the boxplots to be horizontal instead of vertical, we obtain that by reversing
the roles of \variable{age} and \variable{substance}:
<<>>=
bwplot(substance ~ age, data=HELPrct)
@

\myindex{mosaic plot}


\subsection{Graphical summaries of one variable}

If we want to make a plot that involves only one variable, we simply omit 
the \variable{y}-part of the formula.
For example, a histogram like
\Rindex{histogram()}

<<historam-example1, echo=FALSE>>=
histogram( ~ age, data=HELPrct) 
@
\Caution{It is important to note that when there is only one variable it is on 
the \emph{right} side of the formula.}
%
can be made with
\TeachingTip{Tell students that because \R\ is computing 
the $y$ values, we don't need to provide them.  This isn't exactly
the reason why things are this way, but it helps them remember.}
%
<<eval=FALSE, echo=TRUE>>=
histogram( ~ age, data=HELPrct) 
@

\InstructorNote{Introducing \option{width} and \option{center} here violates our usual policy of accepting defaults and saving options for later.
But it is important that histogram bins be chosen appropriately, and no algorithmic
default works well for all data sets.  We encourage students to make several 
histograms and to experiment with \option{center} and especially \option{width}.}
The \pkg{mosaic} package adds some extra functionality to \function{histogram()}
to make it easier to specify the bins used.  In particular, the options
\option{width} and \option{center} (default is 0) can be used to define the 
width of the bins and the center of one of the bins.  For example, to create a histogram
with bins that are 5 years wide we can use \option{width=5}, 
and we can shift the bins left and right by providing a value for \option{center}.
\Note{\option{center} need not be contained in the bins that are displayed.  So to 
get bins with edges ``on the 0's and 5's'', we can set the \option{center} to 
2.5, regardless of the range of the data.}
<<out.width=".47\\textwidth">>=
histogram( ~ age, data=HELPrct, width=5) 
histogram( ~ age, data=HELPrct, width=5, center=2.5) 
@
There is enough data here to use a bin for each integer if we like.
Because the default value of \option{center} is 0, setting \option{width} 
to 1 centers the bins on the integers, avoiding potential confusion about 
which edge is included in the bin.
<<>>=
histogram( ~ age, data=HELPrct, width=1) 
@
Additional plots of a single quantitative variable are illustrated in 
Section~{sec:paletteOfPlots}.

\Rindex{bargraph()}
For a single categorical variable,
we can make a bar graph for a categorical variable using 
\function{bargraph()} in place of \function{histogram()}.
Since formulas are required to have a right-hand side,
horizontal bar graphs are produced using \option{horizontal = TRUE}.
\Rindex{barchart()}
\Pointer{The \function{bargraph()} function is not in the \pkg{lattice} package 
but in the \pkg{mosaic} package.  The \pkg{lattice} function \function{barchart()}
creates bar graphs from \emph{summarized} data; \pkg{bargraph()} takes care of 
creating this summary data and then uses \function{barchart()} to create the plot.}
<<out.width=".47\\textwidth">>=
bargraph( ~ substance, data=HELPrct ) 
bargraph( ~ substance, data=HELPrct, horizontal=TRUE) 
@


\subsection{A palette of plots}
\label{sec:paletteOfPlots}
The power of the template is that we can now make many different kinds of plots
by mimicking the examples above but replacing the goal.

\Rindex{densityplot()}
\Rindex{freqpolygon()}
\Rindex{dotPlot()}
\Rindex{qqmath()}
<<one-var-plots, eval=FALSE, tidy=FALSE, out.width=".3\\textwidth">>=
  histogram( ~age, data=HELPrct) 
densityplot( ~age, data=HELPrct) 
freqpolygon( ~age, data=HELPrct) 
    dotPlot( ~age, data=HELPrct, width=1) 
     bwplot( ~age, data=HELPrct) 
     qqmath( ~age, data=HELPrct) 
@

\begin{widestuff}
<<echo=FALSE, out.width=".3\\textwidth">>=
<<one-var-plots>>
@
\end{widestuff}


For one categorical variable, we can use a bar graph.
\Note{The \pkg{lattice} package does not supply a 
function for creating pie charts.  This is no great loss
since it is generally harder to make comparisons using a pie 
chart.}
<<>>=
   bargraph( ~ sex, data=HELPrct)  # categorical variable
@


\Rindex{plotPoints()}
<<two-var-plots, eval=FALSE, tidy=FALSE>>=
    xyplot( width ~ length, data=KidsFeet )  # 2 quantitative vars
plotPoints( width ~ length, data=KidsFeet)  # mosaic alternative
   bwplot( length ~ sex,    data=KidsFeet)  # 1 cat; 1 quant
      bwplot( sex ~ length, data=KidsFeet)  # reverse roles
@
<<echo=FALSE, out.width=".47\\textwidth">>=
<<two-var-plots>>
@


\Caution{Note that \function{dotplot()} produces a very different kind of plot 
from that produced by \function{dotPlot()}. (Note the capital P in \function{dotPlot()}), 
\function{dotPlot()} produces what students will more commonly think of as a dot plot.}

The \pkg{lattice} package also provides the \function{stripplot()} and 
\function{dotplot()} functions which can be used for one-dimensional scatter plots. \TeachingTip{We generally don't introduce \function{dotplot()} and
\function{stripplot()} to students but simply use \function{xyplot()}
or \function{plotPoints()}.} 
\Rindex{dotplot()}
\Rindex{stripplot()}
<<out.width=".47\\textwidth">>=
stripplot( ~length, data=KidsFeet)
  dotplot( ~length, data=KidsFeet)
@

These work reasonably well for small data sets but are of limited utility 
for larger data sets.

\newpage

The dot-style graphics functions can also be used with one 
quantitative variable and one categorical variable.
<<tidy=FALSE, out.width=".47\\textwidth">>=
    xyplot( sex ~ length, data=KidsFeet)
plotPoints( sex ~ length, data=KidsFeet)
 stripplot( sex ~ length, data=KidsFeet)
   dotplot( sex ~ length, data=KidsFeet)
@

\subsection{Groups and sub-plots}

We can add additional variables to our plots
either by overlaying multiple plots or by placing
multiple plots next to each other in a grid.
To overlay plots, we add an extra argument to our template using \option{groups = },
and to create sub-plots (called \term{panels} in \pkg{lattice} and \term{facets} in 
\pkg{ggplot2} graphics) using a formula of the form

<<eval=FALSE>>=
y ~ x | z
@

For example, we can overlay density plots of age for each substance group
in separate panels for each sex as follows:

<<tidy=FALSE>>=
densityplot( ~ age | sex, data=HELPrct,  
               groups=substance,  
               auto.key=TRUE)   
@
\myindex{legends}
\myindex{facets|see{conditional plots}}
\myindex{conditional plots}
\code{auto.key=TRUE} adds a simple legend so we can tell which of the overlaid curves is
which.



\section{Numerical Summaries}

\Note{The important thing to notice in this section is how little 
there is to learn once you know how to make plots.  Simply change 
the plot name to a summary statistic name and your done.}
Numerical summaries can be created in the same way, we simply replace
the plot name with the name of the numerical summary we desire.
Nothing else changes; a mean and a histogram each summarise a single
variable, so exchanging \function{histogram()} for \function{mean()} 
gives us the numerical summary we desire.

\Pointer{To see the full list of these formula-aware
numerical summary functions, use
<<eval=FALSE, tidy=FALSE>>=
?favstats
@
}

\Rindex{mean()}
<<>>=
histogram( ~ age, data=HELPrct)
     mean( ~ age, data=HELPrct)
@


\Rindex{sd()}
\Rindex{var()}
\Rindex{median()}
\Rindex{min()}
\Rindex{max()}
\Rindex{sum()}
\Rindex{IQR()}
\Rindex{favstats()}
The \pkg{mosaic} package includes formula-aware versions of several
numerical summaries, including 
\function{mean()},
\function{sd()},
\function{var()},
\function{min()},
\function{max()},
\function{sum()},
\function{IQR()}.
In addition, the \function{favstats()} function computes many of 
our favorite statistics all at once:
<<>>=
favstats( ~ age, data=HELPrct)
@
\Rindex{tally()}
And the \function{tally()} function can be used to tally counts.


<<>>=
tally( ~ sex, data=HELPrct)
tally( ~ substance, data=HELPrct)
@
Sometimes it is more convenient to display proportions or percents.
<<>>=
tally( ~ substance, data=HELPrct, format="percent")
tally( ~ substance, data=HELPrct, format="proportion")
@

Summary statistics can be computed separately for multiple subsets of a data
set.  This is analogous to plotting multiple variables and can be thought about
in three ways.  Each of these computes the same value.

<<>>=
# age dependant on substance
sd(   age ~ substance, data=HELPrct)
# age separately for each substance
sd( ~ age | substance, data=HELPrct)
# age grouped by substance
sd( ~ age, groups=substance, data=HELPrct)
@
The \function{favstats()} function can compute several numerical summaries for
each subset
<<>>=
favstats(age ~ substance, data=HELPrct)
@

Similarly, we can create two-way tables that display either as 
counts or proportions.

<<>>=
tally(sex ~ substance, data=HELPrct)
tally( ~ sex + substance, data=HELPrct)
@
Marginal totals can be added with \option{margins=TRUE}
<<>>=
tally(sex ~ substance, data=HELPrct, margins=TRUE)
tally( ~ sex + substance, data=HELPrct, margins=TRUE)
@

\section{Linear models}
\myindex{linear models|seealso{\texttt{lm()}}}
\Rindex{lm()}

Although we have not mentioned linear models yet, they are an important motivation
for the template approach to graphical and numerical summaries.  The \pkg{lattice}
graphics system already makes use of the same template as linear models, and the
\pkg{mosaic} package makes it possible to do numerical summaries with the same template.
By introducing students to the template for graphical and numerical summaries, there
is very little new to learn when they are ready to fit a model.
\FoodForThought{Perhaps you are thinking this means that we don't 
need to wait so long to introduce modeling in the introductory
statistics course.  We're thinking the same thing.}


For example, suppose we want to know how the width of kids' feet depends on the
length of the their feet.  We could make a scatter plot
and we can construct a linear model using the same template
<<>>=
xyplot(width ~ length, data=KidsFeet)
lm(width ~ length, data=KidsFeet)
@
We'll have more to say about modeling elsewhere.  For now, the important point is 
that our use of the template for graphing and numerical summaries prepares students 
to ask how does $y$ depend on $x$ and to formalize models of two or more variables
when the time comes.
\Pointer{For a more thorough treatment of how to use \R\ for 
the core topics of a traditional introductory statistics course,
see \emph{A Compendium of Commands to Teach Statistics with R}.
}% 


\section{A few other tests}

Many introductory statistics classes introduce students to one- and two-sample
tests for means and proportions.  The \pkg{mosaic} package brings these into
the template as well.

\authNote{We could use better examples here.  -- rjp 2014-06-21}%
\Rindex{t.test()}
\Pointer{Chi-squared tests can be performed using \function{chisq.test()}.
This function is a little different in that it operates on tabulated data 
of the sort produced by \function{tally()} rather than on the 
data itself.  So the use of the template happens inside \function{tally()}
rather than in \function{chisq.test()}.}
<<tidy=FALSE>>=
t.test( ~ length, data=KidsFeet)
@

\newpage

The output from these functions also includes more than we really need.
The \pkg{mosaic} package provides \function{pval()} and \function{confint()}
for extracting p-values and confidence intervals:

\Rindex{pval()}
\Rindex{confint()}
<<>>=
pval( t.test( ~ length, data=KidsFeet) )
confint( t.test( ~ length, data=KidsFeet) )
@
\Rindex{binom.test()}
\Rindex{prop.test()}
<<echo=FALSE>>=
OLD <- options(digits=3)
@
<<>>=
confint(t.test( length ~ sex, data=KidsFeet))
# using Binomial distribution
confint(binom.test( ~ sex, data=HELPrct))   
# using normal approximation to the binomial distribution
confint(prop.test( ~ sex, data=HELPrct))    
confint(prop.test(sex ~ homeless, data=HELPrct))
@
<<echo=FALSE>>=
options( OLD )
@


\section{\texttt{lattice} bells and whistles}

In the plots we have shown so far, 
we have focused on creating a variety of useful plots
and (for the most part) accepted the default presentation of them.  
The \pkg{lattice}
graphics system provides many bells and whistles that can be 
introduced once the graphics template has been mastered.  
Optional arguments to the graphics functions can be used to
add or modify
\begin{itemize}
	\item
		the viewing window
	\item
		titles,
	\item
		axis labels,
	\item
		colors, shapes, sizes, and line types,
	\item
		transparency,
	\item
		fonts
	\end{itemize}
\Pointer{Some of the arguments here use lists.  Lists are 
one of the fundamental ``container types'' in \R.  We will
have more to say about them in Chapter~\ref{chap:containers}.}%
and many other features of a plot.
Our advice is to hold off on such bells and whistles until
students ask or an analysis demands them.  

\subsection{Example: Number of births per day}
We have seen the \dataframe{Births78} data set in
Section~\ref{sec:Births78Intro}.  The plots below take
advantage of additional arguments to improve the plot.
\Pointer{\texttt{\%\%} performs modular arithmetic, in this 
case giving seven groups, one for each day of the week.
We could also use the \function{wday()} function
in the \pkg{lubridate} package to compute the weekday directly
from \variable{date}.}

The next plot illustrates one of the important 
features of this data set -- there are usually fewer births
on two days of the week and more on the other five.

\Rindex{auto.key}
\myindex{labels!axis}
\Rindex{xlab}
\Rindex{ylab}
\Rindex{main}
\myindex{titles (plots)}
\Rindex{par.settings}
<<fig.width=4, tidy=FALSE>>=
xyplot(births ~ date, data=Births78,  
        groups=dayofyear %% 7, 
        auto.key=list(columns=4),
        main="Number of US births each day in 1978",
        xlab="day of year",
        ylab="# of births",
        par.settings=list(
          superpose.symbol=list(pch=16, cex=.8, alpha=.8) )
       )
@

From this we can be quite certain that 1978 began on a Sunday.

Here we have used
\Rindex{pch}
\Rindex{cex}
\Rindex{alpha}
\myindex{plot symbol!shape|see{\texttt{pch}}}
\myindex{plot symbol!size|see{\texttt{cex}}}
\myindex{transparency|see{\texttt{alpha}}}
\myindex{opacity|see{\texttt{alpha}}}
\begin{itemize}
	\item
		\option{auto.key} to control the layout of the legend (4 columns instead of 1)
	\item
		\option{main} to set the title for the plot
	\item
		\option{xlab} and \option{ylab} to set the axis labels
	\item
		\option{par.settings} to set the plot character (\option{pch}),
		character expansion (\option{cex}), and opacity (\option{alpha})
		for overlaid plots (\option{superpose.symbol}).
\end{itemize}


The following plot uses lines instead of points which makes it easier to
locate the handful of unusual observations.
<<fig.width=4, tidy=FALSE>>=
xyplot( births ~ date, data=Births78,  
  groups=dayofyear %% 7, type='l',
  main="Number of US births each day in 1978",
  auto.key=list(columns=4, lines=TRUE, points=FALSE),
  xlab="day of year",
  ylab="# of births"
)
@

\subsection{Themes}
\Rindex{theme.mosaic()}
Settings that are used repeatedly can be collected into a theme.  The mosaic 
package provides such a theme called \function{theme.mosaic()}.  
The \function{show.settings()} function displays the settings of the 
currently active theme.

\Rindex{trellis.par.set()}
\Rindex{show.settings()}
\myindex{\texttt{lattice} settings}
\myindex{themes!\texttt{lattice}|see{\texttt{trellis.par.set()}}}
\begin{widestuff}
<<out.width=".9\\textwidth", fig.width=10, fig.height=6>>=
trellis.par.set(col.whitebg())
show.settings()
@
\end{widestuff}

\begin{widestuff}
<<out.width=".9\\textwidth", fig.width=10, fig.height=6>>=
trellis.par.set(theme.mosaic(bw=TRUE))
show.settings()
@
\end{widestuff}

\begin{widestuff}
<<out.width=".9\\textwidth", fig.width=10, fig.height=6>>=
trellis.par.set(theme.mosaic())
show.settings()
@
\end{widestuff}

\noindent
Themes can also be assigned to \option{par.settings} if we want them to
affect only one plot:
<<fig.width=4, tidy=FALSE>>=
xyplot( births ~ date, data=Births78,  
  groups=dayofyear %% 7, type='l',
  main="Number of US births each day in 1978",
  auto.key=list(columns=4, lines=TRUE, points=FALSE),
  par.settings=theme.mosaic(bw=TRUE),
  xlab="day of year",
  ylab="# of births"
)
@





%\subsection*{Some Examples}

\section{Some additional examples}

\subsection{Dot plots}

Dotplots are not as commonly seen in the statistical literature as they are in
statistics education, where they can serve an important role in helping students
learn to interpret histograms (and frequency polygons and density plots).  
A \term{dot plot} represents each value of a quantitative variable with a dot.  The values
are rounded a bit so that the dots line up neatly, and dots are stacked up into little
towers when the data values cluster near each other.  Dot plots are primarily used with 
modestly sized data sets and can be used as a bridge to the other plots, where there is
no longer a direct connection between a component of the plot and an individual observation.
\TeachingTip{Using dot plots for sampling distributions and bootstrap distributions
is useful for testing purposes since probabilities can be easily estimated by counting
dots -- especially if the total number of dots is chosen to be something simple like 1000.}


\Rindex{dotPlot()}
Here is an example using the sepal lengths recorded in the \dataframe{iris} data set.
<<rs2-dotPlot,cache=FALSE,fig.width=4,fig.height=3.0, tidy=FALSE>>=
dotPlot(~ Sepal.Length, data=iris, 
		n=30,      # approx. 30 bins/columns
		alpha=.6)  # partially transparent
@
\myindex{conditional plots}
We can use a conditional variable to give us separate dot plots for each of the three
species in this data set.
<<rs2-dotPlot-condB,tidy=FALSE,cache=FALSE,out.width="\\textwidth",fig.width=6>>=
dotPlot(~ Sepal.Length | Species, data=iris, n=20, 
         layout=c(3,1)) # 3 columns (x) and 1 row (y)
@


The connection between histograms and dot plots can be visualized by overlaying one on 
top of the other
\Rindex{histogram()}
<<echo=FALSE,fig.height=2.5>>=
histogram(~ Sepal.Length, data=iris, n=25, 
		  panel=function(x,...) {
			  mosaic:::panel.xhistogram(x, alpha=.7, ...)
			  mosaic:::panel.dotPlot(x, pch=1, cex=.9, col="gray80", alpha=.7, ...)
		  }, 
			  type="count") 
@

\medskip
\subsection{Frequency polygons: \texttt{freqpolygon()}}
\Rindex{freqpolygon()}
\myindex{frequency polygon|see{\texttt{freqpolygon()}}}

\term{Frequency polygons} and \term{density plots} provide alternatives to histograms
that make it easier to overlay the representations of multiple subsets of the data.
A frequency polygon is created from the same data summary (bins and counts) as a histogram, 
but instead of representing each bin with a bar, it is represented by a point 
(at the center of the where the top of the histogram bar would have been).  

\Rindex{MASS}
\Rindex{geyser}
<<>>=
require(MASS)
freqpolygon( ~ duration, data=geyser, n=15)
@
\TeachingTip[-1.5in]{Point out that an interesting feature of this distribution is its clear 
bimodality.
In particular, the mean and median eruption time are not a good measures of the duration of a  
``typical'' eruption since almost none of the eruption durations are near the mean and median.}
Numerically, the data are being summarized and  represented in exactly the same way as for 
histograms, but visually the horizontal and vertical line segments of the histogram are 
\Caution{The \dataframe{faithful} data set contains similar data, but the 
variable names in that data frame are 
poorly chosen.  The \dataframe{geyser} data set in the \pkg{MASS}
package has better names and more data.}
These points are then connected with line segments.
Here is an example that shows the distribution of Old Faithful eruptions times
from a sequence of observations 

replaced by sloped line segments.  
\Rindex{ladd()}
<<echo=FALSE>>=
histogram( ~ duration, data=geyser, n=15, col="lightskyblue")
ladd( panel.freqpolygon(geyser$duration, n=15) )
@
This may give a more accurate visual representation in some 
situations (since the distribution can ``taper off'' better).  More importantly, it makes 
it much easier to overlay multiple distributions.

\begin{widestuff}
<<tidy=FALSE>>=
freqpolygon( ~ Sepal.Length, data=iris, 
			groups=Species, 
			ylim=c(0,1.5)   # manually choose the range for the y-axis
)
@
\end{widestuff}

%\medskip
\subsection{Density plots: \texttt{densityplot()}}
\Rindex{densityplot()}


\term{Density plots} are similar to frequency polygons, but the piecewise linear
representation is replaced by a smooth curve.  
<<>>=
densityplot( ~ Sepal.Length, data=iris, groups=Species)
@
Beginners do not need to know the details
of how that smooth curve is generated, but should be introduced to the \option{adjust}
argument which controls the degree of smoothing.  It is roughly equivalent to choosing 
wider or narrower bins for a histogram or frequency polygon.  The default value is 1.
Higher values smooth more heavily; lower values, less so.
<<tidy=FALSE, out.width=".47\\textwidth">>=
densityplot( ~ Sepal.Length, data=iris, groups=Species, 
             adjust=3, main="adjust=3")
densityplot( ~ Sepal.Length, data=iris, groups=Species, 
             adjust=1/3, main="adjust=1/3")
@

\subsection{The Density Scale}
\myindex{density scale}

There are three scales that can be used for the plots in the preceding section: 
\code{count}, 
\code{percent}, 
and \code{density}.  
Beginning students will be most familiar with the \code{count} scale and perhaps also 
the \code{percent} scale, but most will not have seen the \code{density} scale.
The density scale captures the most important aspect of all of these plots:

\begin{boxedText}
	\centerline{Area is proportional to frequency.}
\end{boxedText}

\noindent
The density scale is chosen so that the constant of proportionality is 1, in which case we have
\begin{boxedText}
	\centerline{Area equals proportion.}
\end{boxedText}
\TeachingTip{Create some histograms or frequency polygons with a density scale and see
if your students can determine what the scale is.  Choosing convenient bin widths (but not 1)
and comparing plots with different bin widths and different scale types can help them
reach a good conjecture about the density scale.}
This is the only scale available for \function{densityplot()} and is the most suitable 
scale if one is primarily interested in the \emph{shape} of the distribution.  The vertical scale
is affected very little by the choice of bin widths or \option{adjust} multipliers.
It is also the appropriate scale to use when overlaying a density function onto a histogram,
something the \pkg{mosaic} package makes easy to do.
<<fig.width=6,out.width="\\textwidth", tidy=FALSE>>=
histogram( ~ Sepal.Length | Species, data=iris, fit="normal")
@

The other scales
are primarily of use when one wants to be able to read off bin counts or percents from the plot.




\subsection{Groups or panels?}

\myindex{conditional plots}
\Rindex{iris}
\Rindex{xyplot}
The following examples using the \dataframe{iris} data set provide a comparison of 
using groups or panels to separate subsets of the data.  First we put the three
species into three separate panels.

<<rs2-iris-xyplot-cond,tidy=FALSE,cache=TRUE,fig.width=6,out.width=".8\\textwidth">>=
xyplot(Sepal.Length ~ Sepal.Width | Species, data=iris,
  layout=c(3,1)) # layout controls number of columns and rows
@
Alternatively, 
we can use the \option{groups} argument to indicate the 
different species using different symbols on the same panel.
\Rindex{auto.key}
<<rs2-iris-xyplot-groups,cache=TRUE,tidy=FALSE>>=
xyplot(Sepal.Length ~ Sepal.Width, groups=Species, 
  auto.key=list(columns=3), data=iris)
@
Sometimes it is useful to do both at once.

<<rs2-iris-xyplot-condgroups,cache=TRUE,tidy=FALSE>>=
xyplot(Sepal.Length ~ Sepal.Width | Species, groups=Species, 
  auto.key=list(columns=3), data=iris)
@


\subsection{Dealing with long labels}

Suppose we want to display the following table (based on data from the 
\emph{1985 Current Population Survey}) using bar graph.
\Rindex{CPS85}
\myindex{Current Population Survey|see{\texttt{CPS85}}}
\Rindex{tally()}
<<>>=
tally( ~sector, data=CPS85)
@
The \pkg{mosaic} function \function{bargraph()} can 
display these tables as bar graphs, but there isn't enough room for the labels.
\Rindex{bargraph()}
<<rs2-bargraph1,tidy=FALSE>>=
bargraph(~ sector, data=CPS85)
@
One solution would be to use horizontal bars
<<rs2-bargraph2a>>=
# horizontal bars
bargraph(~ sector, data=CPS85, horizontal=TRUE)  
@
Another is to rotate the labels.
<<rs2-bargraph1a,tidy=FALSE>>=
bargraph(~ sector, data=CPS85, 
                   scales=list(x=list(rot=45)))
@

As with the other lattice plots, we can add grouping or conditioning to 
our plot.
<<rs2-bargraph3a,tidy=FALSE, tidy=FALSE, out.width=".47\\textwidth">>=
bargraph(~ sector, data=CPS85, groups=race, 
                   auto.key=list(space="right"),
                   scales=list(x=list(rot=45)))
bargraph(~ sector | race, data=CPS85, 
                          scales=list(x=list(rot=45)))
@


\iffalse
Just as bar charts are used to display the distribution of one categorical
variable,  \pkg{mosaic} plots can do the same for cross tables.
The \function{mosaic()} function (from the \pkg{vcd} package) is not a \pkg{lattice} plot, 
but it does use a similar formula interface.  

<<rs2-mosaic1,fig.width=4,fig.height=2>>=
require(vcd)                         # load the visualizing categorical data package
mosaic(~ sex + union, CPS85)
@
We see that there are more non-union women than we would expect just from
the marginal distribution of union status and gender.

\Caution{The \function{mosaic()} function has nothing to do with 
the \pkg{mosaic} package, they just happen to share the same name.}%

Alternatively, we can send \function{mosaic()} the output of \function{xtabs()}:
<<rs2-mosaic2,fig.keep="none">>=
mosaic(xtabs(~ sex + union, CPS85))  # non-whites are more likely to be unionized
@
\FoodForThought{Neither \function{mosaic()} nor the similar \function{mosaicplot()}
are as clever as one could hope.  In particular, without some extra customization,
both tend to look bad if the levels of the variables have long names.
\function{mosaic()} plots also always stay square.}


Alternatively,
we can send our own hand-made table (although the output isn't quite as nice without some
extra effort we won't discuss just now):
<<rs2-mosaic3,fig.width=6,fig.height=2.5>>=
mosaic(mycrosstable)
@
\fi



\begin{problem}
\Rindex{Utilities2}
The \dataframe{Utilities2} data set in the \pkg{mosaic} package contains information
about the bills for various utilities at a residence in Minnesota collected over a number of years.
Since the number of days in a billing cycle varies from month to month, variables 
like \variable{gasbillpday} (\dataframe{elecbillpday}, etc.) contain the gas bill (electric bill, etc.) 
divided by the number of days in the billing cycle.
\begin{enumerate}
\item Use the documentation to determine what the \variable{kwh} variables contains.
\item
Make a scatter plot of \dataframe{gasbillpday} vs. \dataframe{monthsSinceY2K} using the command
<<rs2-gasbill,fig.keep="none", tidy=FALSE>>=
xyplot(gasbillpday ~ monthsSinceY2K, data=Utilities2, 
                     type='l')        # the letter l
@
\item[]
What pattern(s) do you see?
\item
What does \option{type='l'} do?  Make your plot with and without it.  Which is easier to read
in this situation?
\item
What happens if we replace 
\option{type='l'} with 
\option{type='b'}?
\item
Make a scatter plot of \variable{gasbillpday} by \variable{month}.   
What do you notice?

\item
Make side-by-side boxplots of \variable{gasbillpday} by \variable{month} using the \dataframe{Utilities2}
data frame.   
What do you notice?

Your first try probably won't give you what you expect.  The reason is that month is coded
using numbers, so \R\ treats it as numerical data.  We want to treat it as categorical data.
To do this in \R\, use \variable{factor(month)} in place of \variable{month}.  
\R\ calls categorical data a \term{factor}.

\item
Make any other plot you like using this data.  Include both a copy of your plot and a 
discussion of what you can learn from it.
\end{enumerate}
\end{problem}

\begin{problem}
The table below is from a study of nighttime lighting in infancy and 
eyesight (later in life).  
% latex table generated in R 2.12.1 by xtable 1.5-6 package
% Fri Feb  4 15:46:48 2011
\begin{center}
\begin{tabular}{rrrr}
  \hline
 & no myopia & myopia & high myopia \\ 
  \hline
darkness & 155 & 15 & 2 \\ 
  nightlight & 153 & 72 & 7 \\ 
  full light & 34 & 36 & 3 \\ 
   \hline
\end{tabular}
\end{center}

\begin{enumerate}
%\item
%Do you think this was an experiment or an observational study?  Why?
\item
Recreate the table in \R. %Copy and paste the results into your Word document.
\item
What percent of the subjects slept with a nightlight as infants?

There are several ways to do this.  You could use \R\ as a calculator to do the arithmetic.
You can save some typing if you use the function \function{tally()}.  See
\code{?tally} for documentation.
%If you just want row and column totals added to the table, see \verb!mar_table()!
%in the \verb!vcd! package.
\item Create a graphical representation of the data.  What does this plot reveal?
\end{enumerate}
\end{problem}

\section{Saving Your Plots}

There are several ways to save plots in \RStudio, but the easiest is probably the following:
\marginnote{You can save all of this exporting and copying and pasting if you use RMarkdown, 
or \pkg{knitr}/\LaTeX\ to prepare your documents.}
\begin{enumerate}
\item
In the \tab{Plots} tab, click the ``Export'' button.
\item
Copy the image to the clipboard using right click.
\item
Go to your document (e.g. Microsoft Word) and paste in the image.
\item
Resize or reposition your image as needed.
\end{enumerate}
\Rindex{pdf()}
The \function{pdf()} function can be used to save plots as pdf files.  See 
the documentation of this function for details and links to functions that 
can be used to save graphics in other file formats.

\Pointer{\function{mplot()} is a \emph{generic} function.  \R\ includes many generic 
functions (like \function{print()} and \function{plot()} and \function{summary()}).  These 
functions inspect the objects passed as arguments (at least the first one) and decide
what to do based on the class of the argument(s).}%

\section{\texttt{mplot()}}
\Rindex{mplot()}

The \function{mplot()} function does a number of different things, depending on what 
information it is provided.
\Rindex{print()}
\Rindex{plot()}
\Rindex{summary()}
\myindex{generic functions}
%
When \function{mplot()} is given a data frame in \RStudio, it opens up an interactive plot with 
controls that allow the user to select variables and create plots of various sorts.  
\begin{center}
	\includegraphics[width=.9\textwidth]{images/mplot-HELPrct}
\end{center}
\Rindex{lattice}
\Rindex{ggplot2}
\Rindex{manipulate}
The plots can be made using \pkg{lattice} or \pkg{ggplot2}, and there is a ``Show expression''
button that displays the code used to create the plot.  This can be used to learn how to 
make the plot and can be copied and pasted into the console or documents.
\Caution{This feature of \function{mplot()} only works within \RStudio{} because it
takes advantage of the \pkg{manipulate} package which only works within \RStudio.
See Chapter~\ref{chap:manipulate} for more about \pkg{manipulate}.}


The use of \function{mplot()} makes it easy to explore a number of plots
quickly and can facilitate learning either \pkg{lattice} or \pkg{ggplot2} by
showing the code used to create the plots.

\newpage
\section{Review of \R\ Commands}


\begin{widestuff}
Here is a brief summary of the commands introduced in this chapter.

<<include=FALSE>>=
x <- 1:10
@
\Rindex{tally()}
\Rindex{mean()}
\Rindex{median()}
\Rindex{var()}
\Rindex{sd()}
\Rindex{favstats()}
\Rindex{quantile()}
\Rindex{sum()}
\Rindex{cumsum()}
\Rindex{histogram()}
\Rindex{dotPlot()}
\Rindex{freqpolygon()}
\Rindex{densityplot()}
\Rindex{qqmath()}
\Rindex{bwplot()}
\Rindex{xyplot()}
\Rindex{bargraph()}
\Rindex{mplot()}
\myindex{quantile-quantile plots|see{\texttt{qqmath}}}
<<tidy=FALSE,results='hide',fig.keep="none",warning=FALSE>>=
require(mosaic)                        # load the mosaic package
require(mosaicData)                    # load the mosaic data sets

tally( ~ sector, data=CPS85)          # frequency table
tally( ~ sector + race, data=CPS85)   # cross tabulation of sector by race   
mean( ~ age, data = HELPrct)          # mean age of HELPrct subjects
mean( ~ age | sex, data = HELPrct)    # mean age of male and female HELPrct subjects
mean(age ~ sex, data = HELPrct)       # mean age of male and female HELPrct subjects
median(x); var(x); sd(x);              # more numerical summaries
quantile(x); sum(x); cumsum(x)         # still more summaries
favstats( ~ Sepal.Length, data=iris)   # compute favorite numerical summaries

histogram( ~ Sepal.Length | Species, data=iris)      # histograms (with extra features)
dotPlot( ~ Sepal.Length | Species, data=iris)             # dot plots for each species
freqpolygon( ~ Sepal.Length, groups = Species, data=iris) # overlaid frequency polygons
densityplot( ~ Sepal.Length, groups = Species, data=iris) # overlaid densityplots
qqmath( ~ age | sex, data=CPS85)                          # quantile-quantile plots
bwplot( Sepal.Length ~ Species, data = iris)              # side-by-side boxplots
xyplot( Sepal.Length ~ Sepal.Width | Species, data=iris)  # scatter plots for each species
bargraph( ~ sector, data=CPS85)                           # bar graph
@
<<eval=FALSE>>=
mplot(HELPrct)                         # interactive plot (RStudio only)
@

\end{widestuff}
\newpage
\section{Exercises}

%For these problems, create a single Word document containing all of your work.

\shipoutProblems



