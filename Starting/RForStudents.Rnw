<<echo=FALSE,include=FALSE>>=
opts_chunk$set( fig.path="figures/RForStudents-" ) 
set_parent('Master-Starting.Rnw')
set.seed(123)
@




\chapter[What Students Need to Know about R]{What Students Need to Know About R\\ 
\& How to Teach It}
\label{chap:RForStudents}


In Chapter~\ref{chap:RStudio}, we give a brief orientation to the \RStudio\ IDE
and what happens in each of its tabs and panels.
In Chapter~\ref{chap:Template}, we show how to make use of a common template
for graphical summaries, numerical summaries, and modeling.
In this chapter we cover some additional things that are important for 
students to know about the \R\ language.


\section{Two Questions}
\myindex{questions!two}
\myindex{template!the}

When we introduced the formula template in Chapter~\ref{chap:Template}, we presented two
important questions to ask before constructing an \R\ command.  
These questions are useful in contexts beyond the formula template, and indeed for 
computer systems beyond \R, so we repeat them here.  

\TeachingTip{When students have difficulty accomplishing a task in \R, make sure
they can answer these questions before you show them what to do.  If they cannot 
answer these questions, then the primary problem is not with \R.  If you do this
consistently, eventually, you will find your students presenting their \R\ questions 
to you by answering these two questions and then asking ``So how do I get \R\ to do that?"
More likely, once they have answered these two questions, they will already know how
to get \R\ to do what they want -- unless they are asking about functionality that
you have not yet presented.}
%
\begin{enumerate}
	\item What do you want \R\ to do?  

This will generally determine which \R\ function to use.

	\item What must \R\ know to do that?  

		This will determine the inputs to the function.  
\end{enumerate}


\section{Four Things to Know About \R}

As is true for most computer languages, \R\ has to be used on its terms.  
\R\ does not learn the personality and style 
of its users.  Getting along with \R\ is much easier if you keep in mind (and remind 
your students about) a few key features of the \R\ language.

\begin{enumerate}
\item \R\ is case-sensitive
\TeachingTip{Some students will be slow
to catch on to the importance of capitalization. So you may
have to remind them several times early on.} 

If you mis-capitalize something in \R\ it won't do what you want.
Unfortunately, there is not a consistent convention about how capitalization 
should be used, so you just have to pay attention when encountering new
functions and data sets.  

\item 
Functions in \R\ use the following syntax:
<<label="rs-function-syntax",eval=FALSE>>=
functionname( argument1, argument2, ... )
@
\vspace{-5mm}
\TeachingTip{Introduce functions by emphasizing the questions
\emph{What do we want the computer to do?} and 
\emph{What information does the computer need to compute this?}
The answer to the first question determines the function to use.
The answer to the second question determines what the
arguments must be.
}%
\begin{itemize}
\item The arguments are \underline{always} \emph{surrounded by (round) parentheses} and 
\emph{separated by commas}.

Some functions (like \function{data()}) 
have no required arguments, but you still need the parentheses.

\item
If you type a function name without the parentheses, you will see the \emph{code} for that
function (this generally isn't what you want unless you are curious about how 
something is implemented).
\end{itemize}
\item
TAB completion and arrows can improve typing speed and accuracy.

If you begin a command and hit the TAB key, \R\ and \RStudio\ will show you a
list of possible ways to complete the command.  If you hit TAB after the
opening parenthesis of a function, \RStudio\ will display the list of arguments
it expects.  

The up and down arrows can be used to retrieve past commands when working in the console.
\item
If you see a \code{+} prompt, it means \R\ is waiting for more input.

\Caution{Your students will sometimes find themselves in a syntactic hole from which they cannot
dig out.  Teach them about the ESC key early.}%
Often this means that you have forgotten a closing parenthesis or made some other
syntax error.  If you have messed up and just want to get back to the normal prompt,
press the escape key and start the command fresh.
\end{enumerate}

\section{Installing and Using Packages}
\label{sec:installingPackages}
\myindex{package!installing}
\myindex{package!installing|seealso{\texttt{install.packages()}}}
\myindex{package!installing|seealso{\texttt{install_github()}}}

\TeachingTip{If you set up an \RStudio\ server, you can install all
of the packages you want to use.  You can even configure the server to 
autoload packages you use frequently.  Students who use \R\ on their 
desktop machines will need to know how to install and load these packages, 
however.}

\R\ is open source software.  Its development is supported by
a team of core developers and a large community of users.  
One way that users support
\R\ is by providing \term{packages} that contain data and functions
for a wide variety of tasks.  
As an instructor,
you will want to select a few packages that support the way you want
to teach your course.

%\subsection{Installing packages from \cran}
\myindex{CRAN (Comprehensive R Archive Network}
If you need to install a package, most likely it will be on \cran, 
the Comprehensive R Archive Network.
Before a package can be used, it must be \term{installed} 
(once per computer or account)
and
\term{loaded} (once per \R\ session).  
\myindex{package!loading}
\myindex{package!loading|seealso{\texttt{require()}}}
\myindex{package!loading|seealso{\texttt{library()}}}
Installing downloads the package software and prepares it for use
by compiling (if necessary) and putting its components in the proper
location for future use.
Loading makes a previously installed package available for use 
in an \R\ session.

\Rindex{install.packages()}%
\Rindex{require()}%
\Rindex{library()}%

For example, to use the \pkg{mosaic} package, we must first install it:
<<eval=FALSE,tidy=FALSE>>=
install.packages("mosaic") # fetch package from CRAN 
@
Once the package has been installed it must be \emph{loaded} to make it available in
the current session or file using
\TeachingTip{Although the use of \function{library()} is more common
in this situation, we find that students remember the word \function{require()}
better.  For their purposes, the two are essentially the same.  The biggest
difference is how they respond when a package cannot be loaded (usually because
it has not been installed).  \function{require()} generates a warning message 
and returns a logical value that can be used when programming. 
\function{library()} generates an error when the package cannot be loaded.}
<<>>=
library(mosaic)           # load the package before use
@
or 
<<>>=
require(mosaic)            # alternative way to load
@
\Pointer{Although the command is called \function{library()}, the thing
loaded is a \emph{package}, not a library.}


\Caution{Remember that in RMarkdown and Rnw files, any
packages you use must be loaded \emph{within the file.}}
\noindent
The \tab{Packages} tab in \RStudio\ makes installing and loading packages
particularly easy and avoids the need for \function{install.packages()}
for packages on CRAN, and makes loading packages into the console as easy
as selecting a check box.  The \function{require()} (or \function{library()})
function is still needed to load packages within RMarkdown, \pkg{knitr}/\LaTeX, 
and script files.

If you are running on a machine where you don't have privileges to
write to the default library location, you can install a personal 
copy of a package.  If the location of your personal library is 
first in \code{R_LIBS}, this will probably happen automatically.  If not,
you can specify the location manually:

<<eval=FALSE>>=
install.packages("mosaic", lib="~/R/library")
@
%On a networked machine, be sure to use a different local directory for 
%each platform since packages must match the platform.

%Binary packages have been precompiled for a 
%particular platform and are generally faster and easier to set up, if they 
%are available.  Source packages need to be compiled and built on your local
%machine.  Usually this happens automatically -- provided you have all the 
%necessary tools installed on your machine -- so the only disadvantage is the
%extra time it takes to do the compiling and building.

%\subsection{Installing other packages}


\myindex{Bioconductor}
\myindex{github}
CRAN is not the only repository of \R\ packages.  Bioconductor is another
large and popular repository, especially for biological applications, and increasingly
authors are making packages available via github.  For example, you can also
install the mosaic package using
\Rindex{install_github()}
\Rindex{devtools}
<<eval=FALSE>>=
# if you haven't already installed this package
install.packages("devtools")     
require(devtools)
install_github("mosaic", "rpruim")
@

Occasionally you might find a package of interest that is not available via
a repository like \cran{} or Bioconductor.  
Typically, if you find such a package, you will also find instructions
on how to install it.  
If not, you can usually install directly from the 
zipped up package file.

<<eval=FALSE,echo=TRUE>>=
# repos = NULL indicates to use a file, not a repository
install.packages('some-package.tar.gz', repos=NULL)           
@

\authNote{Should this box be placed in an earlier chapter?}
\begin{boxedText}
	From this point on, we will assume that the \pkg{mosaic}
	package has been installed and loaded.
\end{boxedText}


\section{Getting Help}

If something doesn't go quite right, or if you can't remember something, it's good to know
where to turn for help.  In addition to asking your friends and neighbors, you can use
the \R\ help system.
\Rindex{?}

\subsection{?}

To get help on a specific function or data set, simply precede its name with a \code{?}:

\authNote{This isn't working properly}
<<rs-help1,eval=FALSE,tidy=FALSE>>=
?log      # help for the log function
@
<<rs-help2,eval=FALSE,tidy=FALSE>>=
?HELPrct  # help on a data set in the mosaic package
@
This will give you the documentation for the object you are interested in.

\subsection{\texttt{apropos()}}
\Rindex{apropos()}
If you don't know the exact name of a function, you can give part of the name and 
\R\ will find all functions that match.  Quotation marks are mandatory here.

<<rs-apropos>>=
apropos('tally')            # must include quotes.  single or double.
@

\subsection{\texttt{??} and \texttt{help.search()}}
\Rindex{??}
\Rindex{help.search()}
If that fails, you can do a broader search using \code{??} or \function{help.search()}, 
which will find matches not only in the names of functions and data sets, 
but also in the documentation for them.  Quotation marks are optional here.


\subsection{Examples and Demos}

Many functions and data sets in \R\ include example code demonstrating typical uses.
For example,
\marginnote{Not all package authors are equally skilled at creating examples.  
Some of the examples are nonexistent or next to useless, others are excellent.}%
\Rindex{example()}
<<rs-example-histogram,eval=FALSE,results="hide">>=
example(histogram)
@
will generate a number of example plots (and provide you with the commands used to create them).
Examples such as this are intended to help you learn how specific \R\ functions work.
These examples also appear at the end of the documentation for functions and data sets.

The \pkg{mosaic} package (and some other packages as well) also includes demos.  
Demos are bits of \R\ code that can be executed using the \function{demo()} command
with the name of the demo.
To see how demos work, give this a try:
\Rindex{demo()}
<<rs-demo,eval=FALSE,results="hide">>=
demo(lattice)
@
Demos are intended to illustrate a concept or a method and are 
independent of any particular function or data set.

You can get a list of available demos using
<<rs-demo-list,eval=FALSE,results="hide">>=
demo()                     # all demos
demo(package='mosaic')     # just demos from mosaic package
@


\section{Data}
\label{sec:studentdata}%
%To be able to undertake analyses, you will need to
%load data sets into \R\ and \RStudio\ for analysis.

\subsection{Data Frames}

\myindex{data frame}
\myindex{variable}
\myindex{observational unit}
Data sets are usually stored in a special structure called a \term{data frame}.

\TeachingTip{Students who collect their own data, especially if they 
store it in Excel, are unlikely to put data into the correct format
unless explicitly taught to do so.}

\begin{boxedText}
Data frames have a 2-dimensional structure.  
\medskip
\begin{itemize}
\item 
Rows correspond to 
\term{observational units} (people, animals, plants, or other objects we
are collecting data about).
\item
Columns correspond to \term{variables} (measurements collected on each 
observational unit).
\end{itemize}
\end{boxedText}
\TeachingTip{To help students keep variables and data frames straight, and to
make it easier to remember the names, we have adopted the convention that data
frames in the \pkg{mosaic} package are capitalized and variables (usually) are
not.  This convention has worked well, and you may wish to adopt it for your
data sets as well.}

\pkg{Births78}
The \dataframe{Births78} data frame contains three variables measured for each
day in 1978.  
There are several ways we can get some idea about what is in the \dataframe{Births78} 
data frame.

\Rindex{head()}
\Rindex{sample()}
\Rindex{summary()}
<<rs-Births78-head>>=
head(Births78)            # show the first few rows
@

\Rindex{sample()}
<<rs-Births78-sample>>=
sample(Births78, 4)       # show 4 randomly selected rows
@


\Rindex{summary()}
<<rs-Births78-summary>>=
summary(Births78)         # provide summary info about each variable
@

\Rindex{str}
\begin{widestuff}
<<rs-Births78-str>>=
str(Births78)             # show the structure of the data frame
@
\end{widestuff}

\noindent
\myindex{evironments!R}
The output from \function{str()} is also available in the \tab{Environment} tab.

In interactive mode, you can also try
<<rs-view2,eval=FALSE,tidy=FALSE>>=
?Births78
@
to access the documentation for the data set.  This is also available in the \tab{Help} tab.
Finally, the \tab{Environment} tab provides a list of data in the workspace.  Clicking on
one of the data sets brings up the same data viewer as 
\Rindex{View()}
<<rs-view1,eval=FALSE,tidy=FALSE>>=
View(Births78)
@

\authNote{add pointer to fetchData()?}

%\subsection{Getting at the Variables}
We can gain access to a single variable in a data frame using the \code{\$} operator or using
the \function{with()} function.
\marginnote{An alternative is to use the \function{with()} function.
}
\Rindex{\$}
\Rindex{with()}
<<rs-dollar-sign,eval=FALSE>>=
dataframe$variable
with(dataframe, variable)
@
For example, either of 
<<rs-Births78-births,eval=FALSE>>=
Births78$births
with(Births78, births)
@
will show the contents of the \variable{births} variable in \dataframe{Births78} data set.

\marginnote{As we will see, 
there are relatively few instances where one needs to use the \texttt{\$} operator.}
Listing the entire set of values for a particular variable
isn't very useful for a large data set.  
We would prefer to compute numerical or graphical summaries.  We'll do that shortly.

\subsection{The Perils of attach()}
\myindex{attach@\texttt{attach()}!avoid}
\Caution{Avoid the use of \function{attach()}.}
The \function{attach()} function in R can be used to make objects within data frames
accessible in \R\ with fewer keystrokes, but we strongly discourage its use, as
it often leads to name conflicts and other complications.  
\myindex{Google}
The Google R Style Guide\footnote{
\url{http://google-styleguide.googlecode.com/svn/trunk/google-r-style.html}}
echoes this advice, stating that 

\begin{quotation}
\emph{The possibilities for creating errors
when using \function{attach()} are numerous. Avoid it.} 
\end{quotation}
It is far better to directly access
variables using the \code{\$} syntax or to use functions that allow you to 
avoid the \code{\$} operator.


\subsection{Data in Packages}
Data sets in \R\ packages are the easiest to deal with.%
\TeachingTip{Start out using data in packages and show students
how to import their own data once they understand how to work with
data.}%
In section \ref{sec:usingdata},
we'll describe how to load your own data into \R\ and \RStudio,
but we recommend starting with data in packages, 
and that is what we will do here, too.  Once students know 
how to work with data and what data in \R\ are supposed to look
like, they will be better prepared to import their own data sets.

Many packages contain data sets.  
You can see a list of all data sets in all loaded packages
using 

\Rindex{data()}
<<rs-data-list,eval=FALSE,results="hide">>=
data()
@
You can optionally choose to restrict the list to a single package:
<<rs-data-package-list,eval=FALSE,results="hide">>=
data(package="mosaic")
@

Typically%
\Note{This depends on the package.  Most package authors
set up their packages with ``lazy loading'' of data.  If they do not,
then you need to use \function{data()} explicitly.}%
you can use data sets by simply typing their names.  But if you have already
used that name for something or need to refresh the data after making some
changes you no longer want, you can explicitly load the data using the
\function{data()} function with the name of the data set you want.

\Rindex{Births78}
<<rs-data-load>>=
data(Births78)
@
%
\Caution{If two packages include data sets with the same name, you may need to
specify which package you want the data from like this:
<<>>=
data(Births78, packag="mosaic")
@
}%
There is no visible effect of this command, but the \dataframe{Births78} data frame
has now been reloaded from the \pkg{mosaic} package and is ready for use.  Anything you
may have previously stored in a variable with this same name is replaced by
the version of the data set stored with in the \pkg{mosaic} package.


\subsection{Using Your Own Data}
\label{sec:usingdata}
\TeachingTip{Start out using data from packages and focusing on what \R\ can
do with the data.  Later, once students are familiar 
with \R\ and understand the format required for data,
teach students how to import their own data.}
Eventually, students will want to move from using example data sets in \R\ packages
to using data they find or collect themselves.  When this happens will depend on 
the type of students you have and the type of course you are teaching.

\Rindex{read.csv()}
\Rindex{read.file()}
\Rindex{read.table()}
\Rindex{load()}
\R\ provides the functions \function{read.csv()} (for comma separated values files),
\function{read.table()} (for white space delimited files) 
and \function{load()} (for loading data in \R's native format).
The \pkg{mosaic} package includes a function called \function{read.file()} that uses 
slightly different default settings and infers whether it should use \function{read.csv()},
\function{read.table()}, or \function{load()} based on the file name.  

\myindex{Excel}
Since most software packages can export to csv format, this has become a 
sort of \emph{lingua franca} for moving data between packages.  Data in excel, for example,
can be exported as a csv file for subsequent reading in \R.%
\Rindex{resample()}
\Rindex{gdata}
\Rindex{read.xls()}
\Caution{There is a conflict between the \function{resample()} functions in
\pkg{gdata} and \pkg{mosaic}.  If you want to use \pkg{mosaic}'s \function{resample()},
be sure to load \pkg{mosaic} \emph{after} you load \pkg{gdata}.}
If you have python installed on your system, you can also use
\function{read.xls()} from the \pkg{gdata} package to read read directly from
Excel files without this extra step.

Each of these functions accepts a URL as well as a file name, which provides an
easy way to distribute data via the Internet:
\authNote{Should we change URLs to something at mosaic-web.org?}
\Rindex{read.table()}
\Rindex{head()}
<<tidy=FALSE>>=
births <- 
  read.table('http://www.calvin.edu/~rpruim/data/births.txt', 
              header=TRUE)
head(births) # live births in the US each day of 1978.
@
We can omit the \option{header=TRUE} if we use \function{read.file()}
\Rindex{read.file()}
<<tidy=FALSE>>=
births <- 
  read.file('http://www.calvin.edu/~rpruim/data/births.txt')
@
%\Rstudio\ will help you import your own data.  To do so use the ``Import Dataset" 
%button in the \tab{Workspace} tab.  You can load data from text files, from the web, or from
%google spreadsheets.   

\subsection{Importing Data in \RStudio}
\myindex{data!importing into RStudio}
\InstructorNote{Even if you use \RStudio\ GUI for interactive work, you 
will want to know how to use functions like \function{read.csv()} for working
in RMarkdown, or \pkg{knitr}/\LaTeX\ files.}
The \RStudio\ interface provides some GUI tools for loading data.
If you are using the \RStudio\ server, you will first need to upload the data
to the server (in the \tab{Files} tab), and then import the data into your \R\ 
session (in the \tab{Workspace} tab).%
\TeachingTip{Remind students that the 2-step process (upload, then import)
works much like images in Facebook.  First you upload them to Facebook, and once 
they are there you can include them in posts, etc.}%
If you are running the desktop version, the upload step is not needed.


\subsection{Working with Pretabulated Data}
\myindex{data!pretabulated}

Because categorical data is so easy to summarize in a table, 
often the frequency or contingency tables are given instead.
You can enter these tables manually using a combination
of \function{c()}, \function{rbind()} and \function{cbind()}:
\Rindex{c()}
\Rindex{cbind()}
\Rindex{rbind()}
\TeachingTip{This is an important technique if you use a text book
that presents categorical data in tables.}

<<rs-make-table>>=
myrace <- c( NW=67, W=467 )       # c for combine or concatenate
myrace
@

\label{R:make-xtabs}%
<<rs-make-xtabs, tidy=FALSE>>=
mycrosstable <- rbind(               
  NW = c(clerical=15, const=3, manag=6,  manuf=11, 
		 other=5,  prof=7, sales=3, service=17),
  W  = c(82,17,49,57,63,98,35,66)    
			  )
mycrosstable
@
Replacing \function{rbind()} with \function{cbind()} will allow you to give the data
column-wise instead.
\TeachingTip{If plotting pre-tabulated categorical data is important, you probably
want to provide your students with a wrapper function to simplify all this.  We generally
avoid this situation by provided the data in raw format or by presenting an analysing 
the data in tables without using graphical summaries.}

This arrangement of the data would be sufficient for applying the Chi-squared test, but
it is not in a format suitable for plotting with \pkg{lattice}.
Our cross table is still missing a bit of information -- the names of the variables being
stored.  We can add this information if we convert it to a table
<<>>=
class(mycrosstable)
mycrosstable <- as.table(mycrosstable)
# mycrosstable now has dimnames, but they are unnamed
dimnames(mycrosstable)
# let's add meaninful dimnames
names(dimnames(mycrosstable)) <- c('race', 'sector')
mycrosstable
@

\Rindex{barchart()}
\Rindex{bargraph()}
We can use \function{barchart()} instead of \function{bargraph()} to plot data 
already tabulated in this way, but first we need yet one more transformation.
\Rindex{head()}
\Rindex{as.data.frame()}
<<>>=
head(as.data.frame(mycrosstable))
@

<<tidy=FALSE>>=
barchart( Freq ~ sector | race,
          data=as.data.frame(mycrosstable),
          auto.key=list(space='right'),
          scales=list(x=list(rot=45))
		  )
@
<<tidy=FALSE>>=
barchart( Freq ~ sector, groups=race, 
          data=as.data.frame(mycrosstable),
          auto.key=list(space='right'),
          scales=list(x=list(rot=45))
		  )
@


\subsection{Developing Good Data Habits}
However you teach students to collect and import their data, students will need to 
be trained to follow good data organization practices:
\begin{itemize}
\item Choose good variables names.
\item Put variables names in the first row.
\item Use each subsequent row for one observational unit.
\item Give the resulting data frame a good name.
\end{itemize}
Scientists may be disappointed that \R\ data frames don't keep track of additional 
information, like the units in which the observations are recorded.  
This sort of information should be recorded, 
along with a description of the protocols used to collect the data, observations
made during the data recording process, etc.  
This information should be maintained in a lab notebook or a \term{codebook}.
\authNote{NH wants a pointer to wisdom of good data habits.}%



\begin{problem}
Enter the following small data set in an Excel or Google spreadsheet and import the 
data into \Rstudio.

\begin{center}
\includegraphics[width=.75\textwidth]{images/GoogleSpreadsheet}
\end{center}
\end{problem}

%\subsection{Putting Data Into a Package}
%
%It is not that difficult to take a collection of csv files (a format available for many books)
%and put them all into a package.
%The \verb!abd! package contains data sets from \textit{The Analysis of Biological Data}, for example.  
%Kevin Middleton and Randall Pruim contacted the authors and obtained permission to 
%build and disseminate this package.
%
%The \verb!abdData()! function in \verb!abd! makes it easy to map examples and exercises in that book to 
%data frame names in the \verb!abd! package.
%
<<rs-findData-human,eval=FALSE,echo=FALSE>>=
abdData('human')         # all data sets with 'human' in the name
@
%
<<rs-findData-2,eval=FALSE,echo=FALSE>>=
abdData(2)               # all data sets in chapter 2
@
%
%For information on how to create such packages, consult the \textit{Writing R Extensions} manual
%on CRAN.

\newpage
\section{Review of \R\ Commands}


\begin{widestuff}
Here is a brief summary of the commands introduced in this chapter.
\Rindex{require()}
\Rindex{log()}
\Rindex{log10()}
\Rindex{sqrt()}
\Rindex{c()}
\Rindex{data()}
\Rindex{names()}
\Rindex{head()}
\Rindex{str()}
\Rindex{summary()}
\Rindex{sample()}
\Rindex{read.table()}
\Rindex{read.csv()}
\Rindex{read.file()}
<<tidy=FALSE,results='hide',fig.keep="none">>=
require(mosaic)                        # load the mosaic package
answer <- 42                           # store the number 42 in a variable named answer
log(123); log10(123); sqrt(123)        # some standard numerical functions
x <- c(1,2,3)                          # make a vector containing 1, 2, 3 (in that order)

data(iris)                             # (re)load the iris data set
names(iris)                            # see the names of the variables in the iris data
head(iris)                             # first few rows of the iris data set
sample(iris, 3)                        # 3 randomly selected rows of the iris data set
summary(iris)                          # summarize each variables in the iris data set
str(iris)                              # show the structure of the iris data set

mydata <- read.table("file.txt")       # read data from a text file
mydata <- read.csv("file.csv")         # read data from a csv file
mydata <- read.file("file.txt")        # read data from a text or csv file
@

\end{widestuff}
\newpage
\section{Exercises}

\shipoutProblems


