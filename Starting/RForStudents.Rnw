<<echo=FALSE,include=FALSE>>=
source('../include/setup.R')
opts_chunk$set( fig.path="figure/RForStudents-fig-" ) 
if (!exists("standAlone")) set_parent('../include/MainDocument.Rnw')
set.seed(123)
@


\chapter{What Students Need to Know About R \& How to Teach It}
\label{chap:RForStudents}


<<setup,include=FALSE>>=
source('../include/setup.R')
opts_chunk$set( fig.path="figures/RForStudents-fig-" )  
@ 


\section{Welcome to \R\ and \Rstudio}

\R\ is a system for statistical computation and graphics, and
\RStudio\ is an integrated development environment that facilitates use of \R.  
Both (especially together) are powerful statistical tools that you and your students
are unlikely to outgrow.  It is used widely in research and industry.  It is supported
by hundreds of authors of thousands of add-on packages that can provide specialized 
tools for all sorts of analyses.  In short, \R\ is a comprehensive statistical 
computing platform.

\authNote{ref to 1 page handout?}

Most beginning users need only a very small fraction of \R.
Part of using \R\ successfully with students is guiding them to a subset that
is small enough to make them comfortable and creative users and comprehensive enough to
handle the tasks they are likely to encounter.


We use these systems for several reasons:
\begin{enumerate}
\item \R\ and \RStudio\ are open-source tools that are freely available for Mac, PC, and Linux machines.
This means that there is no restriction on having to license a particular
software program, or have
students work in a specific lab that has been outfitted with the technology of choice.
\item \R\ is user-extensible and user extensions can easily be made available to others.
\item \R\ is high quality, rivaling commercial systems.  It is the package of choice for many statisticians and those
who use statistics frequently.  
\item \R\ is becoming very popular with statisticians and scientists, especially in certain
sub-disciplines, like genetics.  Articles in research journals such as \textit{Science} often
include links to the \R\ code used for the analysis and graphics presented.
\item
\R\ is very powerful.  Furthermore, it is gaining new features every day.  New statistical 
methods are often available first in \R.
\end{enumerate}

\RStudio\ is an open source tool that extends \R\ and helps both
novice and expert users.
We have adopted \RStudio\ because it simplifies the interface and
speeds the learning code for this environment.

\authNote{add marginal note about RStudio in the cloud?}

There are several things (mainly those using \function{manipulate()}) that require
the \RStudio\ interface to \R.  

\subsection*{Setting up R and RStudio} 

\R\ can be obtained from \url{http://cran.r-project.org/}.  
Download and installation are pretty straightforward for Mac, PC, or linux machines.

\RStudio\ is available from 
\url{http://www.rstudio.org/}.
\RStudio\ can be installed as a desktop (laptop) application or as a server application
that is accessible to others via the Internet.

\section{Using R as a Calculator}
Once you have launched a desktop/laptop version of \RStudio\ or logged in to an 
\RStudio\ server, you will see something like Figure~\ref{fig:Rstudio-bigview}.
\authNote{rjp: Get new screen shot.}

\begin{figure}
\begin{center}
\includegraphics[width=1.0\textwidth]{images/RStudio-bigview}
\end{center}
\caption{Welcome to \Rstudio.}
\label{fig:Rstudio-bigview}%
\end{figure}

Notice that \Rstudio\ divides its world into four panels.  Several of the panels
are further subdivided into multiple tabs.
The console panel is where we type commands that \R\ will execute. 

Most students are familiar and comfortable with their hand-held calculators, so it
is natural to begin an introduction to \R\ by showing them how \R\ can be used
to perform typical calculator operations.

Try typing the following commands in the console panel.

<<arithmetic>>=
5 + 3
15.3 * 23.4
sqrt(16)  # square root function
@
This last example demonstrates how functions are called within \R as
well as the use of comments.
Comments can be very helpful when writing scripts 
with multiple commands or to annotate example code for your students.
Comments are prefaced with the \verb!#! character.

You can save values to named variables for later reuse.
\TeachingTip{It's probably best to settle on using 
one or the other of the right-to-left assignment operators rather than to switch
back and forth.  The authors of this document have different preferences:
two of us find the equal sign to be simpler for students and more 
intuitive, while the other prefers the right to left operator because
it can also be used in a left to right manner.}%

<<variables1>>=
product = 15.3 * 23.4       # save result
@


<<variables1b,tidy=FALSE>>=
product                     # display the result
product <- 15.3 * 23.4      # <- can be used instead of =
product                     
@
Once variables are defined, they can be referenced with other operators
and functions.

<<variables2,tidy=FALSE>>=
0.5 * product               # half of the product
log(product)                # (natural) log of the product
log10(product)              # base 10 log of the product
log(product,base=2)         # base 2 log of the product
@
\authNote{can we come up with a better (e.g. less mathematical) example?}

\begin{problem}
Calculate the natural logarithm (log base $e$) and base 10 logarithm of 12,345.

What happens if you leave the comma in this number?
<<>>=
log(12,345)
@
\end{problem}


The semi-colon can be used to place multiple commands on one line.  
One frequent use of this is to save and print a value all in one go:

<<variables-semi,tidy=FALSE>>=
15.3 * 23.4 -> product; product    # save result and show it
@


\section{Four Things to Know About \R\ and \RStudio}

\R\ has to be used on its terms.  \R\ does not learn the personality and style 
of its users.  Getting along with \R\ is much easier if you keep in mind (and remind 
your students about) a few key features of the \R\ language.

\begin{enumerate}
\item \R\ is case-sensitive

If you mis-capitalize something in \R\ it won't do what you want.
Unfortunately, there is not a strong convention about how capitalization 
should be used, so you just have to pay attention when encountering new
functions and data sets.  Be aware that some students will be slow
to catch on to the importance of capitalization. 

\authNote{introduce 1 page cheat sheet pointer}

\item 
Functions in \R\ use the following syntax:
<<label="function-syntax",eval=FALSE>>=
functionname( argument1, argument2, ... )
@
\vspace{-5mm}
\TeachingTip{To help students get the hang of function arguments,
ask them \emph{What information does the computer need to compute this?}
}%
\begin{itemize}
\item The arguments are \underline{always} \emph{surrounded by (round) parentheses} and 
\emph{separated by commas}.

Some functions (like \verb!data()!) 
have no required arguments, but you still need the parentheses.

\item
If you type a function name without the parentheses, you will see the \emph{code} for that
function (this generally isn't what you want unless you are curious about how 
something is implemented).
\end{itemize}
\item
TAB completion and arrows can improve typing speed and accuracy.

If you begin a command and hit the TAB key, \R\ and \RStudio\ will show you a list of possible ways to 
complete the command.  If you hit TAB after the opening parenthesis of a function, \RStudio\ will display
the list of arguments it expects.  The up and down arrows can be used to retrieve past commands.
\item
If you see a \verb!+! prompt, it means \R\ is waiting for more input.

\Caution{Your students will sometimes find themselves in a syntactic hole from which they cannot
dig out.  Teach them about the ESC key early.}%
Often this means that you have forgotten a closing parenthesis or made some other
syntax error.  If you have messed up and just want to get back to the normal prompt,
press the escape key and start the command fresh.
\end{enumerate}


\section{Getting Help}

If something doesn't go quite right, or if you can't remember something, it's good to know
where to turn for help.  In addition to asking your friends and neighbors, you can use
the \R\ help system.

\subsection{?}

To get help on a specific function or data set, simply precede its name with a \verb!?!:

\authNote{This isn't working properly}
<<help1,eval=FALSE,tidy=FALSE>>=
?col.whitebg()
@
<<help2,eval=FALSE,tidy=FALSE>>=
?HELPrct  # help on a data set
@
This will give you the documentation for the object you are interested in.

\subsection{\texttt{apropos()}}
If you don't know the exact name of a function, you can give part of the name and 
\R\ will find all functions that match.  Quotation marks are mandatory here.

<<apropos>>=
apropos('histogram')            # must include quotes.  single or double.
@

\subsection{\texttt{??} and \texttt{help.search()}}
If that fails, you can do a broader search using \verb!??! or \verb!help.search()!, 
which will find matches not only in the names of functions and data sets, 
but also in the documentation for them.  Quotation marks are optional here.

% <<help2,eval=FALSE,results=hide>>=
% ??tally                  # any of these will work
% ??"tally"  
% ??'tally'  
% help.search('tally')
% @


\subsection{Examples and Demos}

Many functions and data sets in \R\ include example code demonstrating typical uses.
For example,
<<example-histogram,eval=FALSE,results="hide">>=
example(xhistogram)
@
will generate a number of example plots (and provide you with the commands used to create them).
Examples such as this are intended to help you learn how specific \R\ functions work.
\FoodForThought{Not all package authors are equally skilled at creating examples.  
Some of the examples are next to useless, others are excellent.}
These examples also appear at the end of the documentation for functions and data sets.

The \verb!mosaic! package (and some other packages as well) also includes demos.  
Demos are bits of \R\ code that can be executed using the \verb!demo()! command
with the name of the demo.

To see how demos work, give this a try:
<<demo,eval=FALSE,results="hide">>=
demo(lattice)
@

Demos are intended to illustrate a concept, a method, or some such thing, and are 
independent of any particular function or data set.

You can get a list of available demos using

<<demo-list,eval=FALSE,results="hide">>=
demo()                     # all demos
demo(package='mosaic')     # just demos from mosaic package
@


\section{Data}
To be able to undertake analyses, you will need to
load data sets into \R\ and \RStudio\ for analysis.

\subsection{Data in Packages}
Data sets in \R\ packages are the easiest to deal with.
Many packages contain data sets.  
You can see a list of all data sets in all loaded packages
using 

<<data-list,eval=FALSE,results="hide">>=
data()
@
You can optionally choose to restrict the list to a single package:
<<data-package-list,eval=FALSE,results="hide">>=
data(package="mosaic")
@

Typically (provided the author of the package allowed for lazy loading of data) 
you can use data sets by simply typing their names.  But if you have already
used that name for something or need to refresh the data after making some changes you no longer
want, you can explicitly load the data using the \verb!data()! function with the name of the 
data set you want.

<<data-load>>=
data(Births78)
@

There is no visible effect of this command, but the \dataframe{Births78} data frame
has now been reloaded from the \pkg{mosaic} package and is ready for use.  Anything you
may have previously stored in a variable with this same name is no longer available.

\subsection{Data Frames}

Data sets are usually stored in a special structure called a \term{data frame}.

\begin{boxedText}
Data frames have a 2-dimensional structure.  
\medskip
\begin{itemize}
\item 
Rows correspond to 
\term{observational units} (people, animals, plants, or other objects we
are collecting data about).
\item
Columns correspond to \term{variables} (measurements collected on each 
observational unit).
\end{itemize}
\end{boxedText}

In section \ref{sec:usingdata},
we'll describe how to get your own data into \R\ and \RStudio.  
For now we'll use some data that is all ready for you to use.
The \verb!iris! data frame contains 5 \term{variables} measured for each
of 150 iris plants (the observational units).  
The \verb!iris! data set is included with the default \R\ installation.  
(Technically, it is located in a package called \verb!datasets!  which is always available.)

There are several ways we can get some idea about what is in the \verb!iris! data frame.

<<iris-str>>=
str(iris)
@

<<iris-summary>>=
summary(iris)
@

<<iris-head>>=
head(iris)
@
In interactive mode, you can also try
<<view1,eval=FALSE>>=
View(iris)
@
to see the data or 
<<view2,eval=FALSE>>=
?iris
@
\authNote{need to fix pecularities in how this displays}
to get the documentation about for the data set.

\authNote{add pointer to fetchData()?}

%\subsection{Getting at the Variables}
We can gain
access to an individual variable in a data frame in a number of 
different ways.  Historically, this would use the \verb!$! operator in
the following syntax:

<<dollar-sign,eval=FALSE>>=
dataframe$variable
@
or 
<<eval=FALSE>>=
with(dataframe, variable)
@

For example, either of 

<<iris-Sepal-Length,eval=FALSE>>=
iris$Sepal.Length
@
or 
<<eval=FALSE>>=
with(iris, Sepal.Length)
@
shows the contents of the \verb!Sepal.Length! variable in the following format.
<<echo=FALSE>>=
with(iris, Sepal.Length)
@

A simpler and more elegant approach is to specify the data frame
and variable directly, as we demonstrate below.

Listing the entire set of values for a particular variable
isn't very useful for a large data set.  
We would prefer to compute numerical or graphical summaries.  We'll do that shortly.

The \verb!attach()! function in R can be used to make objects within dataframes
accessible in R with fewer keystrokes, but we strongly discourage its use, as
it often leads to name conflicts and other complications.  
\Caution{Avoid the use of \function{attach()}.}
The Google R Style Guide
(\url{http://google-styleguide.googlecode.com/svn/trunk/google-r-style.html})
echoes this advice, stating that \emph{The possibilities for creating errors
when using attach are numerous. Avoid it.} 
It is far better to directly access
variables using the \verb!$! syntax or to use the \function{with()} function.

\subsection{Using Your Own Data}
\label{sec:usingdata}
\Rstudio\ will help you import your own data.  To do so use the ``Import Dataset" 
button in the \tab{Workspace} tab.  You can load data from text files, from the web, or from
google spreadsheets.   


%\subsubsection*{From Google Spreadsheets}

\authNote{does this work with the non-RStudio run RStudio servers?}

\textbf{From Google.}
The easiest of these is the Google spreadsheets option: Just click, select
your spreadsheet, choose a name, and you're done.

%\subsubsection*{From Excel}
\textbf{From Excel},
you need to follow a 3-step process:
\begin{enumerate}
\item
Save your Excel worksheet as a csv (comma separated value) file.
\item
Upload (in the \tab{Files} tab) your csv file to the server, where you can create folders and store
files in your personal account.  
(To share things with others: Put the files in your Public folder.  
Read the \texttt{AboutPublic.txt} file in that folder for directions.)
\item
Now import ``from a text file'' in the \tab{Workspace} tab.
\end{enumerate}

In either case, be sure to do the following:
\begin{itemize}
\item Choose good variables names.
\item Put your variables names in the first row.
\item Use each subsequent row for one observational unit.
\item Give the resulting data frame a good name.
\end{itemize}
\authNoted{I moved Danny's Simple Relational Database suggestion
to \ref{sec:manipulatingData}.
I don't think I would use a grade/courses example for students nor that
I would introduce \function{merge()} \emph{et al} to newbies right away.
My goal was to have this appendix look like something that I would give
to students as is in the first week.
In any case, I agree that we should have a section on this somewhere.
[RJP]
}%

If you are not using \RStudio, you can read files using
\function{read.csv()} or \function{read.table()} (for white space delimited files).
The \function{mosaic} package includes a function called \function{read.file()} that uses 
slightly different default settings and infers whether it should use \function{read.csv()},
\function{read.table()}, or \function{load()} based on the file name.  
\DiggingDeeper[\centerline{\function{load()}}]{\function{load()} is used
for opening files that store \R\ objects in `native' format.}

Each of these functions 
also accepts a URL in place of a file name, which provides an easy way to distribute data
via the Internet:
<<>>=
births <- read.table('http://www.calvin.edu/~rpruim/data/births.txt', header=TRUE)
head(births)        # number of live births in the US each day of 1978.
@
The \pkg{mosaic} package provides \function{read.file()} which attempts to infer
the file type from its extension and then applies 
\function{read.csv()}, \function{read.table()}, or \function{load()}.
<<>>=
births <- read.file('http://www.calvin.edu/~rpruim/data/births.txt')
@
It also sets a number of defaults, including \option{header=TRUE}.

\begin{problem}
Enter the following small data set in an Excel or Google spreadsheet and import the 
data into \Rstudio.

\begin{center}
\includegraphics[width=.5\textwidth]{images/GoogleSpreadsheet}
\end{center}

From Excel, save the file as a csv and
upload that into \Rstudio under the Files tab, then 
load it using the command:
<<eval=FALSE>>=
JunkData = read.csv("myfile.csv")
@
\end{problem}

%\subsection{Putting Data Into a Package}
%
%It is not that difficult to take a collection of csv files (a format available for many books)
%and put them all into a package.
%The \verb!abd! package contains data sets from \textit{The Analysis of Biological Data}, for example.  
%Kevin Middleton and Randall Pruim contacted the authors and obtained permission to 
%build and disseminate this package.
%
%The \verb!abdData()! function in \verb!abd! makes it easy to map examples and exercises in that book to 
%data frame names in the \verb!abd! package.
%
<<findData-human,eval=FALSE,echo=FALSE>>=
abdData('human')         # all data sets with 'human' in the name
@
%
<<findData-2,eval=FALSE,echo=FALSE>>=
abdData(2)               # all data sets in chapter 2
@
%
%For information on how to create such packages, consult the \textit{Writing R Extensions} manual
%on CRAN.

\section{Summarizing Data}

\subsection{A Few Numerical Summaries}
\R\ includes functions that compute a wide range of numerical and graphical summaries.  
Most of the numerical summaries already familiar to you have obvious names.  
Here are a few examples.  
%(If you don't know what some of these -- like IQR -- are, don't worry;
%we'll be discussing them soon.)

<<numerical-summaries>>=
mean(Sepal.Length, data=iris)     # or with(iris, mean(Sepal.length))
median(Sepal.Length, data=iris)
sd(Sepal.Length, data=iris)
with(iris, quantile(Sepal.Length))
with(iris, IQR(Sepal.Length))
@
\authNote{some functions support data=, others don't}

The \verb!favstats()! function in the \verb!mosaic! package computes several numerical 
summaries all at once.

<<>>=
favstats(~ Sepal.Length, data=iris)   # or with(iris, favstats(Sepal.Length))
@

\authNote{can we remove the tilde?  Do we want to?}

\begin{problem}
What is the average (mean) \emph{width} of the sepals in the \verb!iris! data set?
\end{problem}
\begin{solution}
<<>>=
mean(Sepal.Width, data=iris)
@
\end{solution}

\begin{problem}
Determine the average (mean) sepal width for each of the three species in the \verb!iris! data set.
\end{problem}
\begin{solution}
<<>>=
mean(Sepal.Width ~ Species, data=iris)
@
\end{solution}

\subsection{Lattice Graphics}

There are several ways to make graphs in \R.  One approach is a system called
\verb!lattice! graphics, which we have incorporated into the \verb!mosaic! package.
One of the attractive aspects of 
\verb!lattice! plots is that they make use of a \term{formula interface} 
similar to that used for summary statistics and modeling.

<<formula-interface, eval=FALSE, echo=TRUE>>=
plotname( y ~ x | z, groups=grouping_variable, data=dataframe, ...)
@
\begin{itemize}
\item
Here are the names of several \verb!lattice! plots:
\begin{itemize}
\item \verb!dotPlot! (notice the capital P; \verb!dotplot()! does something different)
\footnote{\texttt{dotPlot()} is in the \texttt{mosaic} package and was created because \texttt{dotplot()} in
the \texttt{lattice} package makes something different from what we call a dot plot.}
\item \verb!xhistogram!  (for histograms)
\item \verb!bwplot!  (for boxplots)
\item \verb!xyplot!  (for scatter plots)
\item \verb!qqmath!  (for quantile-quantile plots)
\end{itemize}
\item
\verb!x! is the name of the variable that is plotted along the horizontal 
($x$) axis.
\item
\verb!y! is the name of the variable that is plotted along the vertical ($y$) 
axis.  (For some plots, this slot is empty because \R\ computes these values
from the values of \verb!x!.)
\item
\verb!z! is a conditioning variable used to split the plot into 
multiple subplots called \term{panels}.
\item
\verb!grouping_variable! is used to display different groups differently
(different colors or symbols, for example) within the same panel.
\item
\verb!...! There are many additional arguments to these functions that let you
control just how the plots look.  (But we'll focus on the basics for now.)
\end{itemize}

%\subsection*{Some Examples}

\subsection{Dot plots: \texttt{dotPlot()}}

A dot plot represents each value of a quantitative variable with a dot.  The values
are rounded a bit so that the dots line up neatly, and dots are stacked up into little
towers when the data values cluster near each other.

For a dot plot, the \verb!y! component of the formula is empty since we let \R\
calculate that for us.

<<iris-dotPlot,cache=TRUE,fig.width=5,fig.height=3.0>>=
dotPlot(~ Sepal.Length, data=iris, n=30)    # n = 30 gives approx 30 columns
@
We can use a conditional variable to give us separate dot plots for each
species, and shrink the dots.
<<iris-dotPlot-condB,cache=FALSE,out.width=".8\\textwidth",fig.width=7>>=
dotPlot(~ Sepal.Length | Species, data=iris, n=20, cex=.6, 
		layout=c(3,1)) # cex used to shrink the dots a bit
@

\subsection{Histograms: \texttt{xhistogram()}}

Histograms are a lot like dot plots, but the towers of dots are replaced by a
vertical bar.
Again the \verb!y! component of the formula is empty since we let \R\
compute the heights of the bars for us.
<<iris-histogram,cache=TRUE,fig.width=8,out.width=".8\\textwidth">>=
xhistogram(~ Sepal.Length, data=iris, n=20)       # n= 20 gives approx. 20 bars
@
We can use a conditional variable to give us separate histograms for each species.

<<iris-histogram-cond,cache=TRUE,fig.width=8,out.width=".8\\textwidth">>=
xhistogram(~ Sepal.Length | Species, data=iris, n=20, layout=c(3,1))
@


In lattice lingo, the three subplots are called panels and the labels at the
top are called strips.  (Strips can be placed on the left side if you prefer.)


\subsection{Boxplots:  \texttt{bwplot()}}

Boxplots are constructed in much the same manner as histograms:
<<iris-bwplot>>=
bwplot(~ Sepal.Length, data=iris)
@

As we did for histograms, we can use conditioning to 
show boxplots for multiple groups within the data set:

<<iris-bwplot-cond,cache=TRUE,fig.width=7,fig.height=2,out.width=".7\\textwidth">>=
bwplot(~ Sepal.Length | Species, data=iris, layout=c(3,1))
@

\vspace{-8mm}

But there are better ways to do this.
<<label="iris-bwplot-2d">>=
bwplot(Sepal.Length ~ Species, data=iris)
@
<<label="iris-bwplot-2dmore">>=
bwplot(Species ~ Sepal.Length, data=iris)
@
@
\vspace{-12mm}

\InstructorNote{This assumes that the variable on the right hand side of the tilde
is categorical}

%\pagebreak

\subsection{Scatterplots: \texttt{xyplot()}}

Scatterplots are made with \verb!xyplot()!.  The formula and modeling interface is used in the same manner as before.
Just remember that the ``$y$ variable'' comes first.  (Its label is also farther left on 
the plot, if that helps you remember.)
<<iris-xyplot,cache=TRUE>>=
xyplot(Sepal.Length ~ Sepal.Width, data=iris)
@

Again, we can use conditioning to make a panel for each species.
<<iris-xyplot-cond,cache=TRUE,fig.width=7,out.width=".7\\textwidth">>=
xyplot(Sepal.Length ~ Sepal.Width | Species, data=iris,
  layout=c(3,1))
@


Even better (for this example), we can use the \verb!groups! argument to indicate the different species using
different symbols on the same panel.
<<iris-xyplot-groups,cache=TRUE>>=
xyplot(Sepal.Length ~ Sepal.Width, groups=Species, auto.key=TRUE,
  data=iris)
@

\subsection{Saving Your Plots}

There are several ways to save plots in \RStudio, but the easiest is probably the following:
\begin{enumerate}
\item
In the \tab{Plots} tab, click the ``Export'' button.
\item
Copy the image to the clipboard using right click.
\item
Go to your document (e.g. Microsoft Word) and paste in the image.
\item
Resize or reposition your image as needed.
\end{enumerate}

\subsection{Tabulating Categorical Data}
The Current Population Survey (CPS) is used to supplement census information
between census years. The \dfn{CPS85} data set consists of a random sample of persons from the
CPS, with information on wages and other characteristics of the workers,
including sex, number of years of education, years of work experience,
occupational status, region of residence and union membership.


<<>>=
head(CPS85, 3)
@

\subsubsection{Calculating Frequency and Contingency Tables from Data}
Categorical variables are  often summarized in a table.  
\R\ can make a table for a categorical variable using \function{tally()}.

<<table1>>=
tally(~ race, CPS85)
tally(~ sector, CPS85)
@

If we prefer to have the results presented as proportions or percents, we 
just have to ask.
<<table2>>=
tally( ~ sector, CPS85, format='perc')
tally( ~ sector, CPS85, format='prop')
@

Alternatively, we can use \verb!table()!, \verb!proptable()!, and
\verb!perctable()!  to make tables of counts, proportions, or percentages,
respectively.


%\subsubsection{Cross-Tabulation with \texttt{xtabs()}}
We can make a \term{cross-table} 
(also called a \term{contingency table} or a \term{two-way table}) 
summarizing this data with \function{tally()}.  
This often provides a useful display of the relationship between
two categorical variables.


<<xtabs>>=
tally(~ race & sector, CPS85)   # 2-way cross-table
@
Alternatively, we can select one of our categorical variables to be 
a conditional variable.  The report is then done using proportions by default.
<<>>=
tally(~ race | sector, CPS85)   # conditional on sector
tally(~ sector | race, CPS85)   # conditional on race
@

\subsubsection*{Entering Tables by Hand}

Because categorical data is so easy to summarize in a table, 
often the frequency or contingency tables are given instead.
You can enter these tables manually as follows:


<<make-table>>=
myrace <- c( NW=67, W=467 )       # c for combine or concatenate
myrace
@

\label{R:make-xtabs}%
<<make-xtabs>>=
mycrosstable <- rbind(               
  NW = c(clerical=15, const=3, manag=6,  manuf=11, other=5,  prof=7, sales=3, service=17),
  W  = c(82,17,49,57,63,98,35,66)    
			  )
mycrosstable
@

Replacing \verb!rbind()! with \verb!cbind()! will allow you to give the data
column-wise instead.

\subsection{Graphing Categorical Data}

%\subsubsection{Bar charts and pie charts}
%We won't use these plots often, in part because summary tables are already a good
%way to understand the data.  
The \pkg{mosaic} function \function{bargraph()} can 
display these tables as bar graphs.
<<bargraph1a>>=
bargraph(~ sector, CPS85, scales=list(x=list(rot=45)))
@
<<bargraph2a>>=
bargraph(~ sector, CPS85, horizontal=TRUE)  # horizontal bars
@

As with the other lattice plots, we can add grouping or conditioning to 
our plot.
<<bargraph3a>>=
bargraph(~ sector, CPS85, groups=race, scales=list(x=list(rot=45)))
@
<<bargraph3amore>>=
bargraph(~ sector | race, CPS85, scales=list(x=list(rot=45)))
@

Just as bar charts are used to display the distribution
of one categorical variable,  mosaic plots can do the same for cross tables.
The
\function{mosaic()} function (from the \pkg{vcd} package) is not a \pkg{lattice} plot, 
but it does use a similar formula interface.  

<<mosaic1,fig.width=4,fig.height=2>>=
require(vcd)                         # load the visualizing categorical data package
mosaic(~ sex + union, CPS85)
@
We see that there are more non-union women than we would expect just from
the marginal distribution of union status and gender.

\Caution{The \function{mosaic()} function has nothing to do with 
the \pkg{mosaic} package, they just happen to share the same name.}%

Alternatively, we can send \function{mosaic()} the output of \function{xtabs()}:
<<mosaic2,fig.keep="none">>=
mosaic(xtabs(~ sex + union, CPS85))  # non-whites are more likely to be unionized
@
\FoodForThought{Neither \function{mosaic()} nor the similar \function{mosaicplot()}
are as clever as one could hope.  In particular, without some extra customization,
both tend to look bad if the levels of the variables have long names.
\function{mosaic()} plots also always stay square.}


Alternatively,
we can send our own hand-made table (although the output isn't quite as nice without some
extra effort we won't discuss just now):
<<mosaic3,fig.width=6,fig.height=2.5>>=
mosaic(mycrosstable)
@



\begin{problem}
The \dfn{Utilities2} data set in the \verb!mosaic! package contains information
about the bills for various utilities at a residence in Minnesota collected over a number of years.
Since the number of days in a billing cycle varies from month to month, variables 
like \vn{gasbillpday} (\dfn{elecbillpday}, etc.) contain the gas bill (electric bill, etc.) 
divided by the number of days in the billing cycle.
\begin{enumerate}
\item Use the documentation to determine what the \vn{kwh} variables contains.
\item
Make a scatter plot of \dfn{gasbillpday} vs. \dfn{monthsSinceY2K} using the command
<<gasbill,fig.keep="none">>=
xyplot(gasbillpday ~ monthsSinceY2K, data=Utilities2, type='l')   # the letter l
@
\item[]
What pattern(s) do you see?
\item
What does \verb!type='l'! do?  Make your plot with and without it.  Which is easier to read
in this situation?
\item
What happens if we replace 
\verb!type='l'! with 
\verb!type='b'!?
\item
Make a scatter plot of \vn{gasbillpday} by \vn{month}.   
What do you notice?

\item
Make side-by-side boxplots of \vn{gasbillpday} by \vn{month} using the \dfn{Utilities2}
data frame.   
What do you notice?

Your first try probably won't give you what you expect.  The reason is that month is coded
using numbers, so \R\ treats it as numerical data.  We want to treat it as categorical data.
To do this in \R\, use \verb!factor(month)! in place of \dfn{month}.  
\R\ calls categorical data a \term{factor}.

\item
Make any other plot you like using this data.  Include both a copy of your plot and a 
discussion of what you can learn from it.
\end{enumerate}
\end{problem}

\begin{problem}
The table below is from a study of nighttime lighting in infancy and 
eyesight (later in life).  
% latex table generated in R 2.12.1 by xtable 1.5-6 package
% Fri Feb  4 15:46:48 2011
\begin{center}
\begin{tabular}{rrrr}
  \hline
 & no myopia & myopia & high myopia \\ 
  \hline
darkness & 155 & 15 & 2 \\ 
  nightlight & 153 & 72 & 7 \\ 
  full light & 34 & 36 & 3 \\ 
   \hline
\end{tabular}
\end{center}

\begin{enumerate}
%\item
%Do you think this was an experiment or an observational study?  Why?
\item
Recreate the table in \Rstudio.  %Copy and paste the results into your Word document.
\item
What percent of the subjects slept with a nightlight as infants?

There are several ways to do this.  You could use \R\ as a calculator to do the arithmetic.
You can save some typing if you use the function \verb!tally()!.  See
\verb!?tally! for documentation.
If you just want row and column totals added to the table, see \verb!mar_table()!
in the \verb!vcd! package.
\item
Make a mosaic plot for this data.  What does this plot reveal?
\end{enumerate}
\end{problem}

Bar graphs can also be used to display two-way tables.  

<<barchart3aa>>=
bargraph( ~ sector, groups=race, data=CPS85)
@




\newpage

\section{\R\ Examples}
\vspace{-3mm}
The commands below are illustrated with the data sets \verb!iris! and 
\verb!CPS85!.  To apply these in other situations, you will need to 
substitute the name of your data frame and the variables in it.

\vspace{-3mm}
\begin{center}
\begin{longtable}{p{2.45in}p{3.30in}}
\verb!answer <- 42! & Store the value 42 in a variable named \verb!answer!.
\\[3mm]
%\verb!sl <- iris$Sepal.Length! & Store the \verb!Sepal.Length! variable from the 
%\verb!iris! data frame into a variable called \verb!sl! (to save typing, for example).
%\\[3mm]
\verb!log(123); log10(123); sqrt(123)! & Take natural logarithm, base 10 logarithm, or square 
root of 123.
\\[3mm]
\verb!x <- c(1,2,3)! & Make a variable containing values 1, 2, and 3 (in that order).
\\[3mm]
\verb!data(iris)! & (Re)load the data set \verb!iris!.
\\[3mm]
\verb!names(iris)! & Display the variables within the dataset.
\\[3mm]
%\verb!findData(2)! & Find \verb!abd! data in chapter 2.
%\\[3mm]
\verb!favstats(~ Sepal.Length, data=iris)! & 
Summarize the distribution of the \verb!Sepal.Length! variable in the \verb!iris! data
frame.
\\[3mm]
\verb!summary(iris)! & 
Summarize each variable in the \verb!iris! data frame.
\\[3mm]
\verb!str(iris)! & A different way to summarize the \verb!iris! data frame.
\\[3mm]
\verb!head(iris)! & First few rows of the data frame \verb!iris!.
\\[3mm]
\verb!require(Hmisc)!

& Load packages.  
(This can also be done by checking boxes in the \tab{Packages} tab.)
\\[3mm]
\multicolumn{2}{l}{
\texttt{summary(Sepal.Length\~{}Species,data=iris,fun=favstats) } 
}
\\[1mm]
& 
Compute favorite statistics of \verb!Sepal.Length! for each \verb!Species!.
[requires \verb!Hmisc!]
\\[3mm]
%\verb!cut(x,breaks,right=TRUE)! & Divide up the range of \verb!x! into 
%	intervals and code the values in \verb!x! according to which interval 
%	they fall into. 
%\\[3mm]
\multicolumn{2}{l}{\texttt{xhistogram(\~{}Sepal.Length|Species, iris)}}
\\[1mm]
& 
Histogram of \verb!Sepal.Length! conditioned on \verb!Species!.
\\[3mm]
\verb!bwplot(Sepal.Length~Species, iris)! & 
Boxplot of \verb!Sepal.Length! conditioned on \verb!Species!.
\\[3mm]
\multicolumn{2}{l}{\texttt{xyplot(Sepal.Length\~{}Sepal.Width|Species, iris)}} 
\\[1mm]
& 
Scatterplot of \verb!Sepal.Length! by \verb!Sepal.Width! 
with separate panels for each  \verb!Species!.
\\[3mm]
\verb!xtabs(~ sector, CPS85)! & Frequency table of the variable \verb!sector!.
\\[3mm]
\multicolumn{2}{l}{\texttt{barchart(xtabs(\~{}sector, CPS85))}}
\\[1mm]
& Make a barchart from the table.
\\[3mm]
\multicolumn{2}{l}{\texttt{xtabs(\~{}sector + race, CPS85)}}
\\[1mm]
& Cross tabulation of \verb!sector!  and \verb!race!.
\\[3mm]
\multicolumn{2}{l}{
\texttt{mosaic(\~{}sector + race, CPS85)} }
\\[1mm]
& Make a mosaic plot.
\\[3mm]
\multicolumn{2}{l}{
\texttt{xtData <- as.data.frame( xtabs(\~{}sector + race, Trematodes) )}}
\\[1mm]
  & Save cross table information as \verb!xtData!. 
\\[3mm]
\multicolumn{2}{l}{
\texttt{barchart(Freq\~{}sector, data=xtData, groups=race)}
}
\\[1mm]
& Use \verb!xtData! to make a segmented bar chart.
\\[3mm]
\verb!sum(x)!; 
\verb!mean(x)!; 
\verb!median(x)!;

\verb!var(x)!; 
\verb!sd(x)!; 
\verb!quantile(x)!
& Sum, mean, 
median,
variance,
standard deviation,
quantiles of \verb!x!.
\\
\end{longtable}
%\rule{4in}{1pt}
\end{center}

\vspace*{-.5in}
\section{Exercises}

%For these problems, create a single Word document containing all of your work.

\shipoutProblems


